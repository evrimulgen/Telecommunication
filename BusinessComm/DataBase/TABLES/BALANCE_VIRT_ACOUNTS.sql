CREATE TABLE BALANCE_VIRT_ACOUNTS
(
  ID_BALANCE_VIRT_ACOUNTS  INTEGER              NOT NULL,
  VIRTUAL_ACCOUNTS_ID      INTEGER              NOT NULL,
  PHONE_ON_ACCOUNTS_ID     INTEGER              NOT NULL,
  PAYMENT_ID               INTEGER              NOT NULL,
  BILL_ID                  INTEGER              NOT NULL,
  PHONE_ID                 INTEGER              NOT NULL,
  YEAR_MONTH               INTEGER              NOT NULL,
  DATE_BALANCE             DATE                 DEFAULT sysdate               NOT NULL,
  SUM_BALANCE              NUMBER(24,2)         DEFAULT 0                     NOT NULL,
  SUM_PAY                  NUMBER(17,2)         DEFAULT 0                     NOT NULL,
  BILL_SUM                 NUMBER(17,2)         DEFAULT 0                     NOT NULL,
  BALANCE_TYPE_ID         INTEGER              DEFAULT 1                     NOT NULL,
  USER_CREATED             VARCHAR2(30 CHAR)    NOT NULL,
  DATE_CREATED             DATE                 NOT NULL,
  USER_LAST_UPDATED        VARCHAR2(30 CHAR)    NOT NULL,
  DATE_LAST_UPDATED        DATE                 NOT NULL
);

COMMENT ON TABLE  BALANCE_VIRT_ACOUNTS IS 'Расчет баланса по виртуальным счетам по указанным датам';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.ID_BALANCE_VIRT_ACOUNTS IS 'Идентификатор записи';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.VIRTUAL_ACCOUNTS_ID IS 'Ссылка на группы лицевых счетов виртуального оператора VIRTUAL_ACCOUNTS';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.PHONE_ON_ACCOUNTS_ID IS 'Ссылка на журнал соотношений телефонных номеров и лицевых счетов оператоора связи PHONE_ON_ACCOUNTS';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.PAYMENT_ID IS 'Ссылка на таблицу платежей PAYMENTS';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.BILL_ID IS 'Ссылка на таблицу выставленных оператором счётов DB_LOADER_BILLS';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.PHONE_ID IS 'Ссылка на таблицу телефонных номеров PHONES';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.YEAR_MONTH IS 'Год, месяц расчета баланса';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.DATE_BALANCE IS 'Дата расчета баланса';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.SUM_BALANCE IS 'Баланс на дату расчета = SUM_PAY - BILL_SUM';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.SUM_PAY IS 'Сумма платежа по таблице платежей PAYMENTS';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.BILL_SUM IS 'Начисленная сумма (полная) по таблице  выставленных счётов DB_LOADER_BILLS';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.BALANCE_TYPE_ID IS 'Тип баланса BALANCE_TYPES.BALANCE_TYPE_ID';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.USER_CREATED IS 'Пользователь, создавший запись';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.DATE_CREATED IS 'Дата/время создания записи';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.USER_LAST_UPDATED IS 'Пользователь, редактировавший запись последним';
COMMENT ON COLUMN BALANCE_VIRT_ACOUNTS.DATE_LAST_UPDATED IS 'Дата/время последней редакции записи';



CREATE UNIQUE INDEX BALANCE_VIRT_ACCAUNT_PK ON BALANCE_VIRT_ACOUNTS
(ID_BALANCE_VIRT_ACOUNTS);

CREATE SEQUENCE S_NEW_BALANCE_VIRT_ACOUNTS
  START WITH 158305
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE OR REPLACE TRIGGER TIU_BALANCE_VIRT_ACOUNTS
BEFORE INSERT OR UPDATE
ON BALANCE_VIRT_ACOUNTS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
IF INSERTING THEN
    IF NVL(:NEW.ID_BALANCE_VIRT_ACOUNTS, 0) = 0 then
      :NEW.ID_BALANCE_VIRT_ACOUNTS := S_NEW_BALANCE_VIRT_ACOUNTS.NEXTVAL;
    END IF;
    :NEW.USER_CREATED := USER;
    :NEW.DATE_CREATED := SYSDATE;
    :NEW.USER_LAST_UPDATED := USER;
    :NEW.DATE_LAST_UPDATED := SYSDATE;
  END IF;
  if UPDATING THEN
    :NEW.USER_LAST_UPDATED := USER;
    :NEW.DATE_LAST_UPDATED := SYSDATE;
  end if;
  
END TIU_BALANCE_VIRT_ACOUNTS;
/


ALTER TABLE BALANCE_VIRT_ACOUNTS ADD (
  CONSTRAINT BALANCE_VIRT_ACCAUNT_PK
  PRIMARY KEY
  (ID_BALANCE_VIRT_ACOUNTS)
  USING INDEX BALANCE_VIRT_ACCAUNT_PK
  ENABLE VALIDATE);

GRANT DELETE, INSERT, SELECT ON BALANCE_VIRT_ACOUNTS TO BUSINESS_COMM_ROLE;
GRANT SELECT ON S_NEW_BALANCE_VIRT_ACOUNTS TO BUSINESS_COMM_ROLE;
GRANT SELECT ON BALANCE_VIRT_ACOUNTS TO BUSINESS_COMM_ROLE_RO;

ALTER TABLE BALANCE_VIRT_ACOUNTS ADD (
  CONSTRAINT BALANCE_TYPE_ID_FK 
  FOREIGN KEY (BALANCE_TYPE_ID) 
  REFERENCES BALANCE_TYPES (BALANCE_TYPE_ID)
  );
  
create index I_VIRTUAL_ACCOUNTS_ID_YM on BALANCE_VIRT_ACOUNTS (VIRTUAL_ACCOUNTS_ID, year_month)
compress 1