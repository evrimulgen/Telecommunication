CREATE TABLE DB_LOADER_BILL_LOAD_LOG
(
  LOG_BILL_ID                     INTEGER       NOT NULL,
  ACCOUNT_ID                      INTEGER       NOT NULL,
  YEAR_MONTH                      INTEGER       NOT NULL,
  FILE_BODY                       Blob,
  FILE_NAME                       Varchar2(150 CHAR),
  BILL_FILE_STATUS_ID             Integer  default 0 NOT NULL,
  ERROR_LOAD                      Varchar2(300 CHAR),
  DATE_CREATED                    DATE NOT NULL,
  USER_CREATED                    VARCHAR2(30 CHAR) NOT NULL,
  PARSED_FILE_TEXT                CLOB
);

COMMENT ON  TABLE DB_LOADER_BILL_LOAD_LOG               IS 'Лог загрузки файлов счетов';
COMMENT ON COLUMN DB_LOADER_BILL_LOAD_LOG.LOG_BILL_ID   IS 'Идентификатор записи';
COMMENT ON COLUMN DB_LOADER_BILL_LOAD_LOG.ACCOUNT_ID    IS 'ИД счета';
COMMENT ON COLUMN DB_LOADER_BILL_LOAD_LOG.YEAR_MONTH    IS 'Год и месяц отчётного периода';
COMMENT ON COLUMN DB_LOADER_BILL_LOAD_LOG.FILE_BODY     IS 'Текст файла счета';
COMMENT ON COLUMN DB_LOADER_BILL_LOAD_LOG.FILE_NAME     IS 'Имя файла (если есть)';
COMMENT ON COLUMN DB_LOADER_BILL_LOAD_LOG.BILL_FILE_STATUS_ID   IS 'Статус файла счета из BILL_FILE_STATUSES';
COMMENT ON COLUMN DB_LOADER_BILL_LOAD_LOG.ERROR_LOAD    IS 'Текст ошибки (если при загрузке файла была ошибка)';
COMMENT ON COLUMN DB_LOADER_BILL_LOAD_LOG.DATE_CREATED  IS 'Дата/время создания записи';
COMMENT ON COLUMN DB_LOADER_BILL_LOAD_LOG.USER_CREATED  IS 'Пользователь, создавший запись';


CREATE UNIQUE INDEX DB_LOADER_BILL_LOAD_LOG_PK ON DB_LOADER_BILL_LOAD_LOG
(LOG_BILL_ID);

CREATE SEQUENCE S_DB_LOADER_BILL_LOAD_LOG
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE OR REPLACE TRIGGER TI_DB_LOADER_BILL_LOAD_LOG
--#Version=1
  BEFORE INSERT ON DB_LOADER_BILL_LOAD_LOG FOR EACH ROW
BEGIN
 IF INSERTING THEN
    IF NVL(:NEW.LOG_BILL_ID, 0) = 0 then
      :NEW.LOG_BILL_ID := S_NEW_DB_LOADER_BILLS.NEXTVAL;
    END IF;
    :NEW.USER_CREATED := USER;
    :NEW.DATE_CREATED := SYSDATE;
  END IF;
END;
/

ALTER TABLE DB_LOADER_BILL_LOAD_LOG ADD (
  CONSTRAINT DB_LOADER_BILL_LOAD_LOG_PK
  PRIMARY KEY
  (LOG_BILL_ID)
  USING INDEX DB_LOADER_BILL_LOAD_LOG_PK
  ENABLE VALIDATE);

ALTER TABLE DB_LOADER_BILL_LOAD_LOG ADD (
  CONSTRAINT DB_L_B_L_LOG_FK_ACCOUNT_ID 
  FOREIGN KEY (ACCOUNT_ID) 
  REFERENCES ACCOUNTS (ACCOUNT_ID)
  ENABLE VALIDATE,
  CONSTRAINT DB_L_B_L_LOG_FK_YEAR_MONTH 
  FOREIGN KEY (YEAR_MONTH) 
  REFERENCES PERIODS (YEAR_MONTH)
  ENABLE VALIDATE);


GRANT DELETE, INSERT, SELECT, UPDATE, ON COMMIT REFRESH ON DB_LOADER_BILL_LOAD_LOG TO BUSINESS_COMM_ROLE;
GRANT SELECT ON S_DB_LOADER_BILL_LOAD_LOG TO BUSINESS_COMM_ROLE;
GRANT SELECT, UPDATE ON DB_LOADER_BILL_LOAD_LOG TO BUSINESS_COMM_ROLE_RO;

Alter table DB_LOADER_BILL_LOAD_LOG add(PARSED_FILE_TEXT clob);
COMMENT ON COLUMN DB_LOADER_BILL_LOAD_LOG.PARSED_FILE_TEXT IS 'Текст обработанного парсером файла';

COMMENT ON COLUMN DB_LOADER_BILL_LOAD_LOG.PARSED_FILE_TEXT     IS 'Текст распознанного файла в json';
ALTER TABLE DB_LOADER_BILL_LOAD_LOG ADD (
  CONSTRAINT FK_BILL_FILE_STATUS_ID
  FOREIGN KEY (BILL_FILE_STATUS_ID) 
  REFERENCES BILL_FILE_STATUSES (BILL_FILE_STATUS_ID)
  ENABLE VALIDATE)