CREATE TABLE LOCAL_PHONE_STATUSES(
  LOCAL_PHONE_STATUSE_ID Integer NOT NULL PRIMARY KEY,
  STATUS_NAME Varchar2(30 CHAR) NOT NULL,
  DATE_CREATED Date NOT NULL,
  USER_CREATED Varchar2(30 CHAR) NOT NULL,
  DATE_UPDATED Date NOT NULL,
  USER_UPDATED Varchar2(30 CHAR) NOT NULL
)
/
  
COMMENT ON TABLE LOCAL_PHONE_STATUSES IS 'Статусы номеров у виртуального оператора связи'
/
COMMENT ON COLUMN LOCAL_PHONE_STATUSES.LOCAL_PHONE_STATUSE_ID IS 'Идентификатор записи'
/
COMMENT ON COLUMN LOCAL_PHONE_STATUSES.STATUS_NAME IS 'Название статуса'
/
COMMENT ON COLUMN LOCAL_PHONE_STATUSES.DATE_CREATED IS 'Дата создания записи'
/
COMMENT ON COLUMN LOCAL_PHONE_STATUSES.USER_CREATED IS 'Пользователь создавший запись'
/
COMMENT ON COLUMN LOCAL_PHONE_STATUSES.DATE_UPDATED IS 'Дата обновления записи'
/
COMMENT ON COLUMN LOCAL_PHONE_STATUSES.USER_UPDATED IS 'Обновивший пользователь'
/

CREATE SEQUENCE S_LOCAL_PHONE_STATUSE_ID
  START WITH 0
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


GRANT SELECT ON S_LOCAL_PHONE_STATUSE_ID TO BUSINESS_COMM_ROLE;

CREATE OR REPLACE TRIGGER TUI_LOCAL_PHONE_STATUSES
BEFORE INSERT OR UPDATE
ON LOCAL_PHONE_STATUSES
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN

 IF INSERTING THEN
    IF NVL(:NEW.LOCAL_PHONE_STATUSE_ID, 0) = 0 then
      :NEW.LOCAL_PHONE_STATUSE_ID := S_LOCAL_PHONE_STATUSE_ID.NEXTVAL;
    END IF;
    :NEW.USER_CREATED := USER;
    :NEW.DATE_CREATED := SYSDATE;
 END IF;
 
 
  :NEW.USER_UPDATED := USER;
  :NEW.DATE_UPDATED := SYSDATE;
 
END ;
/

GRANT DELETE, INSERT, SELECT, UPDATE ON LOCAL_PHONE_STATUSES TO BUSINESS_COMM_ROLE;

GRANT SELECT, UPDATE ON LOCAL_PHONE_STATUSES TO BUSINESS_COMM_ROLE_RO;

CREATE INDEX I_LOCAL_PHONE_STAT_ID_ST_NAME ON LOCAL_PHONE_STATUSES
(LOCAL_PHONE_STATUSE_ID, STATUS_NAME);