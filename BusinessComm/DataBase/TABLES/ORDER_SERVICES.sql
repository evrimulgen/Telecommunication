CREATE TABLE ORDER_SERVICES
(
  ID_ORDER_SERVICES    NUMBER                   NOT NULL,
  NAME_ORDER_SERVICES  VARCHAR2(60 CHAR)        NOT NULL,
  USER_CREATED         VARCHAR2(30 CHAR)        NOT NULL,
  DATE_CREATED         DATE                     NOT NULL,
  USER_LAST_UPDATED    VARCHAR2(30 CHAR),
  DATE_LAST_UPDATED    DATE                     NOT NULL
);

COMMENT ON TABLE ORDER_SERVICES IS 'Справочник заказанных услуг';

COMMENT ON COLUMN ORDER_SERVICES.ID_ORDER_SERVICES IS 'Ид справочника заказанных услуг';

COMMENT ON COLUMN ORDER_SERVICES.NAME_ORDER_SERVICES IS 'Наименование заказанных услуг';

COMMENT ON COLUMN ORDER_SERVICES.USER_CREATED IS 'Пользователь, создавший запись';

COMMENT ON COLUMN ORDER_SERVICES.DATE_CREATED IS 'Дата/время создания записи';

COMMENT ON COLUMN ORDER_SERVICES.USER_LAST_UPDATED IS 'Пользователь, редактировавший запись последним';

COMMENT ON COLUMN ORDER_SERVICES.DATE_LAST_UPDATED IS 'Дата/время последней редакции записи';



CREATE UNIQUE INDEX ORDER_SERVICES_PK ON ORDER_SERVICES
(ID_ORDER_SERVICES)
;


CREATE SEQUENCE S_NEW_ORDER_SERVICES
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


GRANT SELECT ON S_NEW_ORDER_SERVICES TO BUSINESS_COMM_ROLE;

CREATE OR REPLACE TRIGGER TIU_order_services
  BEFORE INSERT OR UPDATE ON ORDER_SERVICES FOR EACH ROW
BEGIN
 IF INSERTING THEN
    IF NVL(:NEW.ID_order_services, 0) = 0 then
      :NEW.ID_order_services := S_NEW_order_services.NEXTVAL;
    END IF;
    :NEW.USER_CREATED := USER;
    :NEW.DATE_CREATED := SYSDATE;
    :NEW.USER_LAST_UPDATED := USER;
    :NEW.DATE_LAST_UPDATED := SYSDATE;
  END IF;
  if UPDATING THEN
    :NEW.USER_LAST_UPDATED := USER;
    :NEW.DATE_LAST_UPDATED := SYSDATE;
  end if;
END;
/


ALTER TABLE ORDER_SERVICES ADD (
  CONSTRAINT ORDER_SERVICES_PK
  PRIMARY KEY
  (ID_ORDER_SERVICES)
  USING INDEX ORDER_SERVICES_PK
  ENABLE VALIDATE);

GRANT SELECT, UPDATE ON ORDER_SERVICES TO BUSINESS_COMM_ROLE;
GRANT SELECT, UPDATE ON ORDER_SERVICES TO BUSINESS_COMM_ROLE_RO;
