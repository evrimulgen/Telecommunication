CREATE TABLE PHONE_ON_ACCOUNTS
(
  PHONE_ON_ACCOUNTS_ID     NUMBER               NOT NULL,
  ACCOUNT_ID               NUMBER               NOT NULL,
  PHONE_ID                 NUMBER               NOT NULL,
  PHONE_IS_ACTIVE          INTEGER              DEFAULT 1                     NOT NULL,
  USER_CREATED             VARCHAR2(30 CHAR)    NOT NULL,
  DATE_CREATED             DATE                 NOT NULL,
  USER_LAST_UPDATED        VARCHAR2(30 CHAR)    NOT NULL,
  DATE_LAST_UPDATED        DATE                 NOT NULL,
  MOBILE_OPERATOR_NAME_ID  NUMBER               NOT NULL
);

COMMENT ON TABLE PHONE_ON_ACCOUNTS IS 'Журнал соотношений телефонных номеров и лицевых счетов оператоора связи';

COMMENT ON PHONE_ON_ACCOUNTS.PHONE_ON_ACCOUNTS_ID IS 'Идентификатор записи';

COMMENT ON PHONE_ON_ACCOUNTS.ACCOUNT_ID IS 'Иденитификатор лицевого счета ACCOUNTS.ACCOUNT_ID';

COMMENT ON PHONE_ON_ACCOUNTS.PHONE_ID IS 'Идентификатор номера телефона PHONES.PHONE_ID';

COMMENT ON PHONE_ON_ACCOUNTS.PHONE_IS_ACTIVE IS 'Признак активности номера(0 - блокирован; 1 - активен)';

COMMENT ON PHONE_ON_ACCOUNTS.USER_CREATED IS 'Пользователь, создавший запись';

COMMENT ON PHONE_ON_ACCOUNTS.DATE_CREATED IS 'Дата/время создания записи';

COMMENT ON PHONE_ON_ACCOUNTS.USER_LAST_UPDATED IS 'Пользователь, редактировавший запись последним';

COMMENT ON PHONE_ON_ACCOUNTS.DATE_LAST_UPDATED IS 'Дата/время последней редакции записи';

COMMENT ON COLUMN PHONE_ON_ACCOUNTS.MOBILE_OPERATOR_NAME_ID IS 'ИД записи MOBILE_OPERATOR_NAMES.MOBILE_OPERATOR_NAME_ID';



CREATE UNIQUE INDEX PHONE_ON_ACCOUNTS_ID_PK ON PHONE_ON_ACCOUNTS
(PHONE_ON_ACCOUNTS_ID);


CREATE SEQUENCE S_NEW_PHONE_ON_ACCOUNTS_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE OR REPLACE TRIGGER TIUD_PHONE_ON_ACCOUNTS
BEFORE INSERT OR UPDATE OR DELETE
ON PHONE_ON_ACCOUNTS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
  
  IF INSERTING THEN
    IF NVL(:NEW.PHONE_ON_ACCOUNTS_ID, 0) = 0 then
      :NEW.PHONE_ON_ACCOUNTS_ID := S_NEW_PHONE_ON_ACCOUNTS_ID.NEXTVAL;
    END IF;
    :NEW.USER_CREATED := USER;
    :NEW.DATE_CREATED := SYSDATE;
    :NEW.USER_LAST_UPDATED := USER;
    :NEW.DATE_LAST_UPDATED := SYSDATE;
    insert into  PHONE_ON_ACCOUNTS_HIST (ACCOUNT_ID, PHONE_ID, PHONE_IS_ACTIVE, STATE, PHONE_ON_ACCOUNTS_ID)
                                 VALUES (:NEW.ACCOUNT_ID, :NEW.PHONE_ID, :NEW.PHONE_IS_ACTIVE, 'Новая запись', :NEW.PHONE_ON_ACCOUNTS_ID);
  END IF;
  
  if UPDATING THEN
    :NEW.USER_LAST_UPDATED := USER;
    :NEW.DATE_LAST_UPDATED := SYSDATE;
    insert into  PHONE_ON_ACCOUNTS_HIST (ACCOUNT_ID, PHONE_ID, PHONE_IS_ACTIVE, STATE, PHONE_ON_ACCOUNTS_ID)
                                 VALUES (:NEW.ACCOUNT_ID, :NEW.PHONE_ID, :NEW.PHONE_IS_ACTIVE, 'Изменение записи', :NEW.PHONE_ON_ACCOUNTS_ID);
  end if;

  if DELETING THEN
    insert into  PHONE_ON_ACCOUNTS_HIST (ACCOUNT_ID, PHONE_ID, PHONE_IS_ACTIVE, STATE, PHONE_ON_ACCOUNTS_ID)
                                 VALUES (:OLD.ACCOUNT_ID, :OLD.PHONE_ID, :OLD.PHONE_IS_ACTIVE, 'Удаление записи', :OLD.PHONE_ON_ACCOUNTS_ID);
  end if;
  
   EXCEPTION
     WHEN OTHERS THEN
       RAISE;
END;
/


ALTER TABLE PHONE_ON_ACCOUNTS ADD (
  CONSTRAINT PHONE_ON_ACCOUNTS_ID_PK
  PRIMARY KEY
  (PHONE_ON_ACCOUNTS_ID)
  USING INDEX BUSINESS_COMM.PHONE_ON_ACCOUNTS_ID_PK
  ENABLE VALIDATE);

ALTER TABLE PHONE_ON_ACCOUNTS ADD (
  CONSTRAINT ACCOUNT_ID_FK 
  FOREIGN KEY (ACCOUNT_ID) 
  REFERENCES BUSINESS_COMM.ACCOUNTS (ACCOUNT_ID)
  ENABLE VALIDATE,
  CONSTRAINT PHONE_ID_FK 
  FOREIGN KEY (PHONE_ID) 
  REFERENCES BUSINESS_COMM.PHONES (PHONE_ID)
  ENABLE VALIDATE,
  CONSTRAINT PHONE_ON_ACCOUNTS_R03 
  FOREIGN KEY (MOBILE_OPERATOR_NAME_ID) 
  REFERENCES BUSINESS_COMM.MOBILE_OPERATOR_NAMES (MOBILE_OPERATOR_NAME_ID)
  ENABLE VALIDATE);

GRANT SELECT ON S_NEW_PHONE_ON_ACCOUNTS_ID TO BUSINESS_COMM_ROLE;

GRANT DELETE, INSERT, SELECT, UPDATE, ON COMMIT REFRESH ON PHONE_ON_ACCOUNTS TO BUSINESS_COMM_ROLE;

GRANT SELECT, ON COMMIT REFRESH ON PHONE_ON_ACCOUNTS TO BUSINESS_COMM_ROLE_RO;

CREATE UNIQUE INDEX PHONE_ON_ACCOUNTS_PH_ID_ACC_ID ON PHONE_ON_ACCOUNTS
(PHONE_ID, ACCOUNT_ID);

CREATE INDEX I_PHONE_ON_ACCOUNTS_ID ON PHONE_ON_ACCOUNTS
(PHONE_ON_ACCOUNTS_ID, PHONE_ID);