CREATE TABLE PROJECTS(
  PROJECT_ID Integer NOT NULL primary key,
  PROJECT_NAME Varchar2(30 CHAR) NOT NULL,
  COMMENTS Varchar2(50 CHAR),
  DATE_CREATED Date NOT NULL,
  USER_CREATED Varchar2(30 CHAR) NOT NULL,
  DATE_UPDATED Date NOT NULL,
  USER_UPDATED Varchar2(30 CHAR) NOT NULL
)
/
  
COMMENT ON TABLE PROJECTS IS 'Проекты (для частных лиц, организаций и т.д.)'
/
COMMENT ON COLUMN PROJECTS.PROJECT_ID IS 'Идентификатор записи'
/
COMMENT ON COLUMN PROJECTS.PROJECT_NAME IS 'Название проекта'
/
COMMENT ON COLUMN PROJECTS.COMMENTS IS 'Комментарии'
/
COMMENT ON COLUMN PROJECTS.DATE_CREATED IS 'Дата создания записи'
/
COMMENT ON COLUMN PROJECTS.USER_CREATED IS 'Пользователь создавший запись'
/
COMMENT ON COLUMN PROJECTS.DATE_UPDATED IS 'Дата обновления записи'
/
COMMENT ON COLUMN PROJECTS.USER_UPDATED IS 'Обновивший пользователь'
/

CREATE SEQUENCE S_PROJECT_ID
  START WITH 0
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;

GRANT SELECT ON S_PROJECT_ID TO BUSINESS_COMM_ROLE;

CREATE OR REPLACE TRIGGER "TUID_PROJECTS" BEFORE DELETE OR INSERT OR UPDATE
ON PROJECTS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN

 IF INSERTING THEN
    IF NVL(:NEW.PROJECT_ID, 0) = 0 then
      :NEW.PROJECT_ID := S_PROJECT_ID.NEXTVAL;
    END IF;
    :NEW.USER_CREATED := USER;
    :NEW.DATE_CREATED := SYSDATE;
 END IF;
 
 
 IF INSERTING or updating THEN
  :NEW.USER_UPDATED := USER;
  :NEW.DATE_UPDATED := SYSDATE;
 END IF;
  
  IF DELETING THEN
   if (:OLD.PROJECT_ID = 0) then
      RAISE_APPLICATION_ERROR(-20001,'Эту запись удалять нельзя!');
   end if;
 END IF;
 
END;
/

GRANT DELETE, INSERT, SELECT, UPDATE ON PROJECTS TO BUSINESS_COMM_ROLE;

GRANT SELECT, UPDATE ON PROJECTS TO BUSINESS_COMM_ROLE_RO;

CREATE INDEX I_PROJECTS_ID_NAME ON PROJECTS
(project_id, project_name);
/