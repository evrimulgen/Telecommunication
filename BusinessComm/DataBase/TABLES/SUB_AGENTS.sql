CREATE TABLE SUB_AGENTS
(
  SUB_AGENT_ID           INTEGER PRIMARY KEY NOT NULL,
  SUB_AGENT_NAME         VARCHAR2(100 Char) NOT NULL UNIQUE,
  USER_CREATED       VARCHAR2(30 Char) NOT NULL,
  DATE_CREATED       DATE NOT NULL,
  USER_LAST_UPDATED  VARCHAR2(30 Char) NOT NULL,
  DATE_LAST_UPDATED  DATE NOT NULL
);

COMMENT ON TABLE SUB_AGENTS IS 'Субагенты';

COMMENT ON COLUMN SUB_AGENTS.SUB_AGENT_ID IS 'Первичный ключ';

COMMENT ON COLUMN SUB_AGENTS.SUB_AGENT_NAME IS 'Наименование субагента';

COMMENT ON COLUMN SUB_AGENTS.USER_CREATED IS 'Пользователь, создавший запись';

COMMENT ON COLUMN SUB_AGENTS.DATE_CREATED IS 'Дата/время создания записи';

COMMENT ON COLUMN SUB_AGENTS.USER_LAST_UPDATED IS 'Пользователь, редактировавший запись последним';

COMMENT ON COLUMN SUB_AGENTS.DATE_LAST_UPDATED IS 'Дата/время последней редакции записи';


CREATE SEQUENCE S_SUB_AGENT_ID
  START WITH 0
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


GRANT SELECT ON S_SUB_AGENT_ID TO BUSINESS_COMM_ROLE;

CREATE OR REPLACE TRIGGER "TIUD_SUB_AGENTS" BEFORE DELETE OR INSERT OR UPDATE
ON SUB_AGENTS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF NVL(:NEW.SUB_AGENT_ID, 0) = 0 THEN
      :NEW.SUB_AGENT_ID := S_SUB_AGENT_ID.NEXTVAL ;
    END IF;
    :NEW.USER_CREATED := USER;
    :NEW.DATE_CREATED := SYSDATE;
  END IF;

 IF (INSERTING OR UPDATING) THEN 
   :NEW.USER_LAST_UPDATED := USER;
   :NEW.DATE_LAST_UPDATED := SYSDATE;
 end if;

   IF DELETING THEN
    if (:OLD.SUB_AGENT_ID = 70) THEN
       RAISE_APPLICATION_ERROR(-20001,'Эту запись удалять нельзя!');
    END IF;
  END IF;

END;
/


ALTER TABLE SUB_AGENTS ADD (
  PRIMARY KEY
  (SUB_AGENT_ID)
  USING INDEX
  ENABLE VALIDATE,
  UNIQUE (SUB_AGENT_NAME)
  USING INDEX
  ENABLE VALIDATE);

GRANT DELETE, INSERT, SELECT, UPDATE ON SUB_AGENTS TO BUSINESS_COMM_ROLE;

GRANT SELECT, UPDATE ON SUB_AGENTS TO BUSINESS_COMM_ROLE_RO;
