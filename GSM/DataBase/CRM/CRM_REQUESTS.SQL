--drop table CRM_REQUESTS;
CREATE TABLE CRM_REQUESTS(
  REQUEST_ID INTEGER,
  PHONE_NUMBER VARCHAR2(10 CHAR),
  TEXT_REQUEST LONG,
  ID_STATUS_REQUEST INTEGER,
  DATE_CREATED DATE,
  USER_CREATED       VARCHAR2(30 CHAR),
  USER_LAST_UPDATED  VARCHAR2(30 CHAR),
  DATE_LAST_UPDATED  DATE);

ALTER TABLE CRM_REQUESTS ADD (RESPONSIBLE_USER VARCHAR2(30 CHAR));
ALTER TABLE CRM_REQUESTS ADD (TYPE_REQUEST_ID INTEGER);
ALTER TABLE CRM_REQUESTS ADD (DOP_CONTACT VARCHAR2(30 CHAR));

--ALTER TABLE CRM_REQUESTS DROP COLUMN TEXT_REQUEST;
ALTER TABLE CRM_REQUESTS ADD(TEXT_REQUEST CLOB);


ALTER TABLE CRM_REQUESTS ADD (operator VARCHAR2(50 CHAR));

ALTER TABLE CRM_REQUESTS
MODIFY(ID_STATUS_REQUEST  NOT NULL)

ALTER TABLE CRM_REQUESTS
MODIFY(TYPE_REQUEST_ID  NOT NULL)



CREATE UNIQUE INDEX PK_CRM_REQUESTS ON CRM_REQUESTS(REQUEST_ID);

ALTER TABLE CRM_REQUESTS ADD (
  CONSTRAINT PK_CRM_REQUESTS
  PRIMARY KEY
  (REQUEST_ID)
  USING INDEX PK_CRM_REQUESTS);

ALTER TABLE CRM_REQUESTS ADD 
CONSTRAINT FK_CRM_TYPE_REQUEST
 FOREIGN KEY (TYPE_REQUEST_ID)
 REFERENCES CRM_TYPE_REQUEST(TYPE_REQUEST_ID)
 VALIDATE;


CREATE SEQUENCE S_NEW_REQUEST_ID;
CREATE OR REPLACE TRIGGER TIU_CRM_REQUESTS
BEFORE INSERT OR UPDATE
ON CRM_REQUESTS 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE 
  PRAGMA AUTONOMOUS_TRANSACTION;
  sms varchar2(512);
  v_DOP_CONTACT integer;
  function convertDOP_CONTACT_to_num(pDOP_CONTACT varchar2) return integer
  as
    res integer;
  begin
    begin
      res := to_number(pDOP_CONTACT);
    exception
      when others then
      res := 0;
    end;
    Return res;
  end;
BEGIN
  IF INSERTING THEN
    IF NVL(:NEW.REQUEST_ID, 0) = 0 then
      :NEW.REQUEST_ID := S_NEW_REQUEST_ID.NEXTVAL;
    END IF;
  END IF;
  IF UPDATING THEN 
    IF (:OLD.ID_STATUS_REQUEST<>:NEW.ID_STATUS_REQUEST) AND (:NEW.ID_STATUS_REQUEST=3) AND (:NEW.TYPE_REQUEST_ID <> 121) THEN 
        v_DOP_CONTACT := convertDOP_CONTACT_to_num(:NEW.DOP_CONTACT);
        IF :NEW.TYPE_REQUEST_ID <> 8 THEN
            --отправляем на номер абонента
            IF nvl(:NEW.PHONE_NUMBER, 0) <> 0 THEN 
                sms:=loader3_pckg.SEND_SMS(:NEW.PHONE_NUMBER, null,'Выполнение заявки №'||:NEW.REQUEST_ID||', временно преостановлено, подробности по телефону 8-495-788-79-08');
            END IF; 
            --если доп. номер <> номеру абонента, то отправляем на него тоже   
            IF nvl(v_DOP_CONTACT, 0) <> 0 THEN --если доп. номер не пустой
                IF nvl(v_DOP_CONTACT, 0) <> nvl(:NEW.PHONE_NUMBER, 0) THEN --если доп. номер <> номеру абонента, а иначе получается что шлем 2 смс на один номер, а это неправильно
                    sms:=loader3_pckg.SEND_SMS(v_DOP_CONTACT, null,'Выполнение заявки №'||:NEW.REQUEST_ID||', временно преостановлено, подробности по телефону 8-495-788-79-08');
                END IF;
            END IF;  
        ELSE
            --отправляем на номер, по которому звонили, а это доп. номер
            IF nvl(v_DOP_CONTACT, 0) <> 0 THEN --если доп. номер не пустой
                sms:=loader3_pckg.SEND_SMS(v_DOP_CONTACT, null,'Выполнение заявки №'||:NEW.REQUEST_ID||', временно преостановлено, подробности по телефону 8-495-788-79-08');
            ELSE --если доп. номер пустой, то отправляем на номер, который ууказан как номер абонента (получается что с него звонили)
                IF nvl(:NEW.PHONE_NUMBER, 0) <> 0 THEN 
                    sms:=loader3_pckg.SEND_SMS(:NEW.PHONE_NUMBER, null,'Выполнение заявки №'||:NEW.REQUEST_ID||', временно преостановлено, подробности по телефону 8-495-788-79-08');
                END IF; 
            END IF;     
        END IF;
    END IF;
  END IF;
  :NEW.DATE_LAST_UPDATED:=SYSDATE;
END;
/


CREATE OR REPLACE FORCE VIEW CRM_V_REQUESTS AS
  SELECT * 
    FROM CRM_REQUESTS;

CREATE OR REPLACE FUNCTION CRM_ADD_REQUEST
(
  pPHONE_NUMBER IN VARCHAR2,
  pOPerator IN VARCHAR2,
  pTYPE_REQUEST_ID in integer
  )
 RETURN NUMBER IS
--#Version=1
  vRES NUMBER;
  SMS        VARCHAR2(2000);
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  insert into CRM_REQUESTS(PHONE_NUMBER, DATE_CREATED, USER_CREATED, USER_LAST_UPDATED, ID_STATUS_REQUEST, RESPONSIBLE_USER, TYPE_REQUEST_ID) 
                  values (pPHONE_NUMBER, sysdate,      pOPerator,    pOPerator,         1,                 pOPerator,        pTYPE_REQUEST_ID) 
    returning REQUEST_ID INTO vRES;
  commit;
  -- pTYPE_REQUEST_ID = 1   ЭТО АКТИВАЦИЯ НОМЕРА
  IF pTYPE_REQUEST_ID = 1 THEN
    INSERT INTO CRM_EVENTS (REQUEST_ID, EVENT_PATH, USER_CREATED, USER_LAST_UPDATED) VALUES (vRES, 'REQUESTS\CREATE', pOPerator, pOPerator);
    commit;
    IF MS_params.GET_PARAM_VALUE('SEND_SMS_CREATE_REQUEST')='1' THEN
      SMS := LOADER3_pckg.SEND_SMS('9276561268',
                                  'Заявка',
                                  'Номер вашей заявки: '|| to_char(vRES) ||' ,заявка принита в работу. ');
    END IF;
  END IF;
  RETURN vRES;
END;
/

GRANT EXECUTE ON CRM_ADD_REQUEST TO CRM_USER;
CREATE SYNONYM CRM_USER.ADD_REQUEST FOR CRM_ADD_REQUEST;

CREATE OR REPLACE PROCEDURE CRM_UPDATE_REQUEST
(
  pREQUEST_ID IN INTEGER,
  pTEXT_REQUEST IN LONG DEFAULT NULL, 
  pOPerator IN VARCHAR2 DEFAULT NULL, 
  pID_STATUS_REQUEST IN INTEGER DEFAULT NULL, 
  pRESPONSIBLE_USER IN VARCHAR2 DEFAULT NULL,
  pTYPE_REQUEST_ID IN INTEGER DEFAULT NULL,
  pDOP_CONTACT IN VARCHAR2 DEFAULT NULL,
  pATTACHED_FILES IN VARCHAR2 DEFAULT NULL,
  pDEADLINE_DATE IN VARCHAR2 DEFAULT NULL
  )
IS
--#Version=1
  vRES NUMBER;
  SMS        VARCHAR2(2000);
  NEEDTOUPDATE int;
BEGIN
  IF pTEXT_REQUEST IS NULL AND pID_STATUS_REQUEST IS NOT NULL THEN 
   update CRM_REQUESTS set USER_LAST_UPDATED=pOPerator, ID_STATUS_REQUEST= pID_STATUS_REQUEST where REQUEST_ID=pREQUEST_ID;
  END IF;
  IF pTEXT_REQUEST IS NOT NULL AND pID_STATUS_REQUEST IS NULL THEN 
   update CRM_REQUESTS set TEXT_REQUEST=pTEXT_REQUEST, USER_LAST_UPDATED=pOPerator where REQUEST_ID=pREQUEST_ID;
  END IF;
  IF pTEXT_REQUEST IS NOT NULL AND pID_STATUS_REQUEST IS NOT NULL THEN 
   update CRM_REQUESTS set TEXT_REQUEST=pTEXT_REQUEST, USER_LAST_UPDATED=pOPerator, ID_STATUS_REQUEST= pID_STATUS_REQUEST where REQUEST_ID=pREQUEST_ID;
  END IF;
  IF pRESPONSIBLE_USER IS NOT NULL THEN 
   update CRM_REQUESTS set RESPONSIBLE_USER=pRESPONSIBLE_USER where REQUEST_ID=pREQUEST_ID;
  END IF;
  IF pTYPE_REQUEST_ID IS NOT NULL THEN 
   update CRM_REQUESTS set TYPE_REQUEST_ID=pTYPE_REQUEST_ID where REQUEST_ID=pREQUEST_ID;
  END IF;
  IF pDOP_CONTACT IS NOT NULL THEN 
   IF pDOP_CONTACT<>'NULL' THEN
    update CRM_REQUESTS set DOP_CONTACT=pDOP_CONTACT where REQUEST_ID=pREQUEST_ID;
   ELSE 
    update CRM_REQUESTS set DOP_CONTACT=NULL where REQUEST_ID=pREQUEST_ID;
   END IF;
  END IF;
  IF pID_STATUS_REQUEST=4 then     
   INSERT INTO CRM_EVENTS (REQUEST_ID, EVENT_PATH, USER_LAST_UPDATED) VALUES (pREQUEST_ID, 'REQUESTS\CLOSE', pOPerator);
   IF MS_params.GET_PARAM_VALUE('SEND_SMS_CREATE_REQUEST')='1' THEN
    SMS := LOADER3_pckg.SEND_SMS('9276561268',
                              'Заявка',
                              'Ваша заявка №'|| to_char(pREQUEST_ID) ||', выполнена. ');
   END IF;
  ELSE 
   NEEDTOUPDATE:=0;
   BEGIN
     SELECT EVENT_ID INTO NEEDTOUPDATE FROM CRM_EVENTS WHERE REQUEST_ID=pREQUEST_ID AND EVENT_PATH='REQUESTS\CHANGE' AND DATE_LAST_UPDATED=(SELECT MAX(DATE_LAST_UPDATED) FROM CRM_EVENTS WHERE REQUEST_ID=pREQUEST_ID) AND USER_LAST_UPDATED=pOPerator;
   EXCEPTION 
     WHEN NO_DATA_FOUND THEN NULL;
   END;
   IF NEEDTOUPDATE=0 THEN
     INSERT INTO CRM_EVENTS (REQUEST_ID, EVENT_PATH, USER_LAST_UPDATED) VALUES (pREQUEST_ID, 'REQUESTS\CHANGE', pOPerator);
   ELSE 
     UPDATE CRM_EVENTS SET DATE_LAST_UPDATED=SYSDATE WHERE EVENT_ID=NEEDTOUPDATE;
   END IF;
  END IF;
  IF pATTACHED_FILES IS NOT NULL THEN
    IF pATTACHED_FILES <> 'NULL' then 
      update CRM_REQUESTS set ATTACHED_FILES=pATTACHED_FILES where REQUEST_ID=pREQUEST_ID;
    ELSE
      update CRM_REQUESTS set ATTACHED_FILES=NULL where REQUEST_ID=pREQUEST_ID;
    END IF;  
  END IF;
  IF pDEADLINE_DATE IS NOT NULL THEN 
    IF pDEADLINE_DATE='NULL' THEN 
     update CRM_REQUESTS set DEADLINE_DATE=NULL where REQUEST_ID=pREQUEST_ID;
    ELSE
     update CRM_REQUESTS set DEADLINE_DATE=TO_DATE(pDEADLINE_DATE, 'YYYY.MM.DD HH24:MI:SS') where REQUEST_ID=pREQUEST_ID;
    END IF;
  END IF;
  commit;
END;

GRANT SELECT, INSERT, DELETE, UPDATE ON CRM_V_REQUESTS TO CRM_USER;

CREATE SYNONYM CRM_USER.REQUESTS FOR CRM_V_REQUESTS;

GRANT EXECUTE ON CRM_UPDATE_REQUEST TO CRM_USER;

CREATE SYNONYM CRM_USER.UPDATE_REQUEST FOR CRM_UPDATE_REQUEST;

ALTER TABLE CRM_REQUESTS ADD ATTACHED_FILES VARCHAR2(4000 CHAR);

ALTER TABLE CRM_REQUESTS ADD DEADLINE_DATE DATE;

CREATE INDEX I_CRM_REQUESTS_TYPE_RESP_USER ON CRM_REQUESTS(TYPE_REQUEST_ID, RESPONSIBLE_USER) 
COMPRESS 2;

CREATE INDEX I_CRM_REQUESTS_DEADLINE_DATE ON CRM_REQUESTS(DEADLINE_DATE) 
COMPRESS;

CREATE INDEX I_CRM_REQUESTS_PHONE_NUMBER ON CRM_REQUESTS(PHONE_NUMBER) 
COMPRESS;
