CREATE TABLE CRM_USER_FILES(
  CRM_USER_FILE_ID INTEGER PRIMARY KEY,
  FILE_NAME VARCHAR2(2000 CHAR) NOT NULL,
  ACCESS_LVL VARCHAR2(2000 CHAR),
  OWNER VARCHAR2(2000 CHAR) NOT NULL,
  DATE_CREATE DATE,
  DATE_LAST_UPDATE DATE
  );
  
CREATE SEQUENCE S_NEW_CRM_USER_FILE_ID
  START WITH 101
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;
  

CREATE OR REPLACE FUNCTION NEW_CRM_USER_FILE_ID RETURN NUMBER IS
--#Version=1
  vRES NUMBER;
BEGIN
  SELECT S_NEW_CRM_USER_FILE_ID.NEXTVAL
  INTO vRES
  FROM DUAL;
  RETURN vRES;
END;
/    

CREATE OR REPLACE TRIGGER TIU_CRM_USER_FILES
  BEFORE INSERT OR UPDATE ON CRM_USER_FILES FOR EACH ROW
--#Version=1
DECLARE
  CURSOR C IS
    SELECT NVL(MAX(CRM_USER_FILE_ID), 0) + 1 AS COU
      FROM CRM_USER_FILES;
  DUMMY C%ROWTYPE; 
BEGIN
  IF INSERTING THEN
    IF NVL(:NEW.CRM_USER_FILE_ID, 0) = 0 then
      OPEN C;
      FETCH C INTO DUMMY;
      IF C%FOUND THEN
        :NEW.CRM_USER_FILE_ID := DUMMY.COU;
      ELSE
        :NEW.CRM_USER_FILE_ID := 1;
      END IF;
    END IF;
    :NEW.DATE_CREATE := SYSDATE;
  END IF;
  :NEW.DATE_LAST_UPDATE := SYSDATE;
END;
/
  
CREATE OR REPLACE SYNONYM CRM_USER.CRM_USER_FILES FOR CRM_USER_FILES;  
  
GRANT SELECT, INSERT, UPDATE, DELETE ON CRM_USER_FILES TO CRM_USER;  
  
alter table CRM_USER_FILES add (
file_size INTEGER,
file_content BLOB
);