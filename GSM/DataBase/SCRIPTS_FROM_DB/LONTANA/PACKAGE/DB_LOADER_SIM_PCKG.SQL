
  CREATE OR REPLACE PACKAGE "LONTANA"."DB_LOADER_SIM_PCKG" AS
--#Version=7
-- 02 Крайнов Добавлена процедура установки статуса номера.
-- 01 Крайнов Создание
--
-- Запись нового баланса из Сервис-Гида
PROCEDURE UPDATE_PHONE_BALANCE(
  pPHONE_NUMBER IN VARCHAR2,
  pCURRENT_BALANCE IN NUMBER
  );
--
-- Удаление записей о опциях этого номера старше 8 часов 
PROCEDURE DELETE_PHONE_OPTIONS(
  pPHONE_NUMBER IN VARCHAR2
  ); 
--
-- Добавление опций
PROCEDURE UPDATE_PHONE_OPTION(
  pPHONE_NUMBER IN VARCHAR2,
  pOPTION_CODE IN NUMBER
  );    
-- 
-- Запись истории изменений в подлюченных услугах 
PROCEDURE LOG_SET_PHONE_OPTION_ADD_REC(
  pPHONE_NUMBER IN VARCHAR2,
  pOPTION_MAME IN VARCHAR2,
  pTYPE_SET IN VARCHAR2,
  pNOTE IN VARCHAR2
  ); 
--
-- Запись истории отправки платных СМС
PROCEDURE LOG_SEND_PAID_SMS_ADD_REC(
  pPHONE_NUMBER IN VARCHAR2,
  pNOTE IN VARCHAR2
  ); 
--
-- Запись нового статуса номера
PROCEDURE UPDATE_PHONE_STATUS(
  pPHONE_NUMBER IN VARCHAR2,
  pSTATUS IN VARCHAR2
  );
--
PROCEDURE ADD_PHONE_BILL(
  pBILL_ID IN VARCHAR2,
  pPHONE_NUMBER IN VARCHAR2,
  pBILL_SUM IN NUMBER,
  pDATE_BEGIN_END IN VARCHAR2
  );
--
PROCEDURE ADD_PHONE_BILL_DETAIL(
  pPHONE_NUMBER IN VARCHAR2,
  pFULL_SUM IN NUMBER,
  pNO_ROUMING_SUM IN NUMBER,
  pROUMING_SUM IN NUMBER,
  pFULL_SUM_CALL IN NUMBER,
  pNO_ROUMING_SUM_CALL IN NUMBER,
  pROUMING_SUM_CALL IN NUMBER
  );
--  
FUNCTION TRANSFER_START(
  pACCOUNT_FROM IN INTEGER,
  pACCOUNT_TO IN INTEGER,
  pTRANSFER_SUM IN NUMBER
  ) RETURN INTEGER;
--
PROCEDURE TRANSFER_END(
  pTRANSFER_ID IN INTEGER,
  pRESULTAT IN VARCHAR2
  );  
--  
FUNCTION GET_ACCOUNT_BILL_LOAD(
  pACCOUNT_LAST_LOAD IN INTEGER
  ) RETURN INTEGER;
--
PROCEDURE ADD_PHONE_BILL_BY_ACCOUNT(
  pBILL_ID IN VARCHAR2,
  pACCOUNT_NUMBER IN VARCHAR2,
  pBILL_SUM IN NUMBER,
  pDATE_BEGIN_END IN VARCHAR2
  );
--
PROCEDURE UPDATE_SG_STATUS_BY_ACCOUNT(
  pACCOUNT_NUMBER IN VARCHAR2,
  pSTATUS IN INTEGER
  );
--
PROCEDURE UPDATE_SG_STATUS_BY_ACCOUNT_2(
  pPHONE_NUMBER IN VARCHAR2,
  pSTATUS IN VARCHAR2
  );
--  
PROCEDURE LOAD_CAPTCHA_FILE(
  pFILE_NAME IN VARCHAR2
  );  
--
FUNCTION GET_CAPTCHA_VALUE(
  pFILE_NAME IN VARCHAR2
  ) RETURN VARCHAR2;
END; 
CREATE OR REPLACE PACKAGE BODY "LONTANA"."DB_LOADER_SIM_PCKG" AS
--
--Обновление баланса телефона из Сервис-Гида
PROCEDURE UPDATE_PHONE_BALANCE(
  pPHONE_NUMBER IN VARCHAR2,
  pCURRENT_BALANCE IN NUMBER
  ) IS
-- 
CURSOR C IS
  SELECT SIM.BALANCE, SIM.DATE_BALANCE, ROWID
    FROM SIM 
    WHERE SIM.CELL_NUMBER=pPHONE_NUMBER;

UP_DO BOOLEAN;   
BEGIN
  UP_DO:=FALSE;
  FOR C1 IN C
  LOOP
    UPDATE SIM 
      SET BALANCE=pCURRENT_BALANCE, DATE_BALANCE=SYSDATE
      WHERE SIM.ROWID=C1.ROWID;      
    COMMIT;
    UP_DO:=TRUE;
  END LOOP;
  IF NOT UP_DO THEN
    INSERT INTO SIM_BALANCE_PHONE_UNDEF(PHONE_NUMBER, BALANCE)
      VALUES(pPHONE_NUMBER, pCURRENT_BALANCE);
  END IF;
END;
--
-- Удаление записей о опциях этого номера старше 8 часов 
PROCEDURE DELETE_PHONE_OPTIONS(
  pPHONE_NUMBER IN VARCHAR2
  ) IS
BEGIN
  DELETE FROM SIM_CURRENT_PHONE_OPTIONS
    WHERE SIM_CURRENT_PHONE_OPTIONS.PHONE_NUMBER=pPHONE_NUMBER
      AND SIM_CURRENT_PHONE_OPTIONS.DATE_OPTION_CHECK<SYSDATE-8/24;
END;  
--
-- Добавление опций
PROCEDURE UPDATE_PHONE_OPTION(
  pPHONE_NUMBER IN VARCHAR2,
  pOPTION_CODE IN NUMBER
  ) IS 
CURSOR C IS
  SELECT ROWID
    FROM SIM_CURRENT_PHONE_OPTIONS 
    WHERE SIM_CURRENT_PHONE_OPTIONS.PHONE_NUMBER=pPHONE_NUMBER
      AND SIM_CURRENT_PHONE_OPTIONS.OPTION_CODE=pOPTION_CODE;
FLAG_BOOL BOOLEAN;    
BEGIN
  FLAG_BOOL:=TRUE;
  FOR C1 IN C
  LOOP
    UPDATE SIM_CURRENT_PHONE_OPTIONS
      SET SIM_CURRENT_PHONE_OPTIONS.DATE_OPTION_CHECK=SYSDATE
      WHERE SIM_CURRENT_PHONE_OPTIONS.ROWID=C1.ROWID;
    FLAG_BOOL:=FALSE;    
  END LOOP;
  IF FLAG_BOOL THEN
    INSERT INTO SIM_CURRENT_PHONE_OPTIONS(PHONE_NUMBER, OPTION_CODE)
      VALUES(pPHONE_NUMBER, pOPTION_CODE);
  END IF;
END;      
--
-- Запись истории изменений в подлюченных услугах 
PROCEDURE LOG_SET_PHONE_OPTION_ADD_REC(
  pPHONE_NUMBER IN VARCHAR2,
  pOPTION_MAME IN VARCHAR2,
  pTYPE_SET IN VARCHAR2,
  pNOTE IN VARCHAR2
  ) IS
-- 
BEGIN
  INSERT INTO SIM_PHONE_OPTION_SET_HISTORY(PHONE_NUMBER, OPTION_NAME, TYPE_SET, NOTE)
    VALUES (pPHONE_NUMBER, pOPTION_MAME, pTYPE_SET, pNOTE);      
  COMMIT;
END;

PROCEDURE LOG_SEND_PAID_SMS_ADD_REC(
  pPHONE_NUMBER IN VARCHAR2,
  pNOTE IN VARCHAR2
  ) IS
-- 
BEGIN
  INSERT INTO SIM_SEND_PAID_SMS_HISTORY(PHONE_NUMBER, NOTE)
    VALUES (pPHONE_NUMBER, pNOTE);  
  UPDATE SIM
    SET SIM.DATE_LAST_ACTIVITY=SYSDATE
    WHERE SIM.CELL_NUMBER=pPHONE_NUMBER;    
  COMMIT;
END;
--
-- Запись нового статуса номера
PROCEDURE UPDATE_PHONE_STATUS(
  pPHONE_NUMBER IN VARCHAR2,
  pSTATUS IN VARCHAR2
  ) IS
--
CURSOR C IS
  SELECT SIM_PHONE_STATUSES.SIM_PHONE_STATUS_ID
    FROM SIM_PHONE_STATUSES
    WHERE SIM_PHONE_STATUSES.SIM_PHONE_STATUS_NAME=pSTATUS;
REC INTEGER;
BEGIN
  OPEN C;
  FETCH C INTO REC;
  IF C%NOTFOUND THEN
    REC:=0;
  END IF;
  CLOSE C; 
  UPDATE SIM
    SET SIM.PHONE_IS_ACTIVE=REC
    WHERE SIM.CELL_NUMBER=pPHONE_NUMBER;  
  COMMIT;
END;

PROCEDURE ADD_PHONE_BILL(
  pBILL_ID IN VARCHAR2,
  pPHONE_NUMBER IN VARCHAR2,
  pBILL_SUM IN NUMBER,
  pDATE_BEGIN_END IN VARCHAR2
  ) IS
CURSOR C IS
  SELECT *
    FROM SIM_PHONE_BILLS
    WHERE SIM_PHONE_BILLS.PHONE_NUMBER=pPHONE_NUMBER
      AND SIM_PHONE_BILLS.BILL_ID=TO_NUMBER(pBILL_ID); 
REC C%ROWTYPE;   
vDATE_BEGIN DATE;   
vDATE_END DATE;
vYEAR_MONTH INTEGER;  
BEGIN
  vDATE_BEGIN:=TO_DATE(SUBSTR(pDATE_BEGIN_END,1,10),'DD.MM.YYYY');
  vDATE_END:=TO_DATE(SUBSTR(pDATE_BEGIN_END,-10,10),'DD.MM.YYYY');
  vYEAR_MONTH:=TO_NUMBER(TO_CHAR(vDATE_END,'YYYYMM'));
  OPEN C;
  FETCH C INTO REC;
  IF C%NOTFOUND THEN
    INSERT INTO SIM_PHONE_BILLS(BILL_ID, PHONE_NUMBER, BILL_SUM, DATE_BEGIN, DATE_END, YEAR_MONTH)
      VALUES(TO_NUMBER(pBILL_ID), pPHONE_NUMBER, pBILL_SUM, vDATE_BEGIN, vDATE_END, vYEAR_MONTH);
    IF pBILL_SUM<>0 THEN   
      UPDATE SIM
        SET SIM.DATE_LAST_ACTIVITY=vDATE_END
        WHERE SIM.CELL_NUMBER=pPHONE_NUMBER
          AND ((SIM.DATE_LAST_ACTIVITY<vDATE_END)
                OR (SIM.DATE_LAST_ACTIVITY IS NULL)); 
    END IF;           
  END IF;
  CLOSE C;
  COMMIT;
END;  

PROCEDURE ADD_PHONE_BILL_DETAIL(
  pPHONE_NUMBER IN VARCHAR2,
  pFULL_SUM IN NUMBER,
  pNO_ROUMING_SUM IN NUMBER,
  pROUMING_SUM IN NUMBER,
  pFULL_SUM_CALL IN NUMBER,
  pNO_ROUMING_SUM_CALL IN NUMBER,
  pROUMING_SUM_CALL IN NUMBER
  ) IS
vYEAR_MONTH INTEGER;  
CURSOR C(pYEAR_MONTH IN INTEGER) IS
  SELECT *
    FROM SIM_PHONE_BILL_DETAILS
    WHERE SIM_PHONE_BILL_DETAILS.PHONE_NUMBER=pPHONE_NUMBER
      AND SIM_PHONE_BILL_DETAILS.YEAR_MONTH=pYEAR_MONTH; 
REC C%ROWTYPE;   
vDATE_BEGIN DATE;   
vDATE_END DATE;
BEGIN
  IF (TO_NUMBER(TO_CHAR(SYSDATE, 'DD'))>3)
      AND(TO_CHAR(SYSDATE+10*1/24/60, 'YYYYMM')=TO_CHAR(SYSDATE, 'YYYYMM')) THEN
    vYEAR_MONTH:=TO_NUMBER(TO_CHAR(SYSDATE,'YYYYMM'));
    OPEN C(vYEAR_MONTH);
    FETCH C INTO REC;
    IF C%FOUND THEN
      UPDATE SIM_PHONE_BILL_DETAILS
        SET FULL_SUM=pFULL_SUM, NO_ROUMING_SUM=pNO_ROUMING_SUM, 
            ROUMING_SUM=pROUMING_SUM, FULL_SUM_CALL=pFULL_SUM_CALL,
            NO_ROUMING_SUM_CALL=pNO_ROUMING_SUM_CALL, ROUMING_SUM_CALL=pROUMING_SUM_CALL
        WHERE SIM_PHONE_BILL_DETAILS.PHONE_NUMBER=pPHONE_NUMBER
          AND SIM_PHONE_BILL_DETAILS.YEAR_MONTH=vYEAR_MONTH;    
    ELSE
      INSERT INTO SIM_PHONE_BILL_DETAILS(YEAR_MONTH, PHONE_NUMBER, 
                                         FULL_SUM, NO_ROUMING_SUM, ROUMING_SUM,
                                         FULL_SUM_CALL, NO_ROUMING_SUM_CALL, ROUMING_SUM_CALL)
        VALUES(vYEAR_MONTH, pPHONE_NUMBER, 
               pFULL_SUM, pNO_ROUMING_SUM, pROUMING_SUM,
               pFULL_SUM_CALL, pNO_ROUMING_SUM_CALL, pROUMING_SUM_CALL);      
    END IF;
    CLOSE C;
  END IF;
  COMMIT;
END;    
--
FUNCTION TRANSFER_START(
  pACCOUNT_FROM IN INTEGER,
  pACCOUNT_TO IN INTEGER,
  pTRANSFER_SUM IN NUMBER
  ) RETURN INTEGER IS
vTRANS_ID INTEGER;  
BEGIN
  vTRANS_ID:=NEW_TRANSFER_ID;
  IF (pACCOUNT_FROM IS NOT NULL)AND(pACCOUNT_TO IS NOT NULL)AND(pTRANSFER_SUM IS NOT NULL) THEN
    INSERT INTO SIM_CP_TRANSFERS(TRANSFER_ID, ACCOUNT_FROM, ACCOUNT_TO, TRANSFER_SUM, RESULTAT)
      VALUES(vTRANS_ID, pACCOUNT_FROM, pACCOUNT_TO, pTRANSFER_SUM, 'Перевод стартовал.');
  END IF;
  COMMIT;
  RETURN vTRANS_ID;
END;
--
PROCEDURE TRANSFER_END(
  pTRANSFER_ID IN INTEGER,
  pRESULTAT IN VARCHAR2
  ) IS
BEGIN
  UPDATE SIM_CP_TRANSFERS
    SET RESULTAT=pRESULTAT,
        DATE_END=SYSDATE
    WHERE TRANSFER_ID=pTRANSFER_ID;
  COMMIT;  
END;
--  
FUNCTION GET_ACCOUNT_BILL_LOAD(
  pACCOUNT_LAST_LOAD IN INTEGER
  ) RETURN INTEGER IS
  CURSOR C IS 
    SELECT SIM.ACCOUNT
      FROM V_SIM_PHONES_BILLS, SIM
      WHERE V_SIM_PHONES_BILLS.CELL_NUMBER = SIM.CELL_NUMBER
        AND SIM.ACCOUNT<>0
        AND TO_NUMBER(SIM.ACCOUNT) > pACCOUNT_LAST_LOAD
      ORDER BY TO_NUMBER(SIM.ACCOUNT) ASC;
  vDUMMY C%ROWTYPE;  
  ITOG INTEGER;    
BEGIN
  ITOG:=0;
  OPEN C;
  FETCH C INTO vDUMMY;
  IF C%FOUND THEN 
    ITOG:=TO_NUMBER(vDUMMY.ACCOUNT);
  ELSE
    ITOG:=0;
  END IF;
  CLOSE C;
  RETURN ITOG;
END;
--
PROCEDURE ADD_PHONE_BILL_BY_ACCOUNT(
  pBILL_ID IN VARCHAR2,
  pACCOUNT_NUMBER IN VARCHAR2,
  pBILL_SUM IN NUMBER,
  pDATE_BEGIN_END IN VARCHAR2
  ) IS
CURSOR C IS
  SELECT *
    FROM SIM_PHONE_BILLS
    WHERE SIM_PHONE_BILLS.BILL_ID=TO_NUMBER(pBILL_ID); 
CURSOR C1 IS
  SELECT sim.CELL_NUMBER
    FROM SIM
    WHERE SIM.ACCOUNT = pACCOUNT_NUMBER; 
REC C%ROWTYPE;   
vDATE_BEGIN DATE;   
vDATE_END DATE;
vYEAR_MONTH INTEGER;  
vPHONE_NUMBER VARCHAR2(10 CHAR);
BEGIN
  vDATE_BEGIN:=TO_DATE(SUBSTR(pDATE_BEGIN_END,1,10),'DD.MM.YYYY');
  vDATE_END:=TO_DATE(SUBSTR(pDATE_BEGIN_END,-10,10),'DD.MM.YYYY');
  vYEAR_MONTH:=TO_NUMBER(TO_CHAR(vDATE_END,'YYYYMM'));
  OPEN C1;
  FETCH C1 INTO vPHONE_NUMBER;
  IF C1%FOUND THEN
    OPEN C;
    FETCH C INTO REC;
    IF C%NOTFOUND THEN
      INSERT INTO SIM_PHONE_BILLS(BILL_ID, PHONE_NUMBER, BILL_SUM, DATE_BEGIN, DATE_END, YEAR_MONTH)
        VALUES(TO_NUMBER(pBILL_ID), vPHONE_NUMBER, pBILL_SUM, vDATE_BEGIN, vDATE_END, vYEAR_MONTH);         
    END IF;
    CLOSE C; 
  END IF;   
  CLOSE C1;  
  COMMIT;
END; 
--
PROCEDURE UPDATE_SG_STATUS_BY_ACCOUNT(
  pACCOUNT_NUMBER IN VARCHAR2,
  pSTATUS IN INTEGER
  ) IS
BEGIN
  IF (LENGTH(pACCOUNT_NUMBER)=10)AND(SUBSTR(pACCOUNT_NUMBER, 1, 1) = '9') THEN-- Указан неправильный пароль.
    UPDATE SIM
      SET SIM.SERVICEGID_STATUS = pSTATUS
      WHERE SIM.CELL_NUMBER = pACCOUNT_NUMBER;
  ELSE
    UPDATE SIM
      SET SIM.SERVICEGID_STATUS = pSTATUS
      WHERE SIM.ACCOUNT = pACCOUNT_NUMBER;
  END IF;
  COMMIT;
END;  
--
PROCEDURE UPDATE_SG_STATUS_BY_ACCOUNT_2(
  pPHONE_NUMBER IN VARCHAR2,
  pSTATUS IN varchar2
  ) IS
BEGIN
      UPDATE temp21
      SET temp21.STR5 = pSTATUS
      WHERE temp21.STR1 = pPHONE_NUMBER;
  COMMIT;
END;  
--
PROCEDURE LOAD_CAPTCHA_FILE(
  pFILE_NAME IN VARCHAR2
  ) IS
  L_BLOB BLOB;
  L_BFILE BFILE;
  dir_name varchar2(300 char);
BEGIN
  --DB_LOADER_SIM_PCKG.LOAD_CAPTCHA_FILE@L_ORCL(pFILE_NAME);
  dir_name:='CAPTCHA_FILES';
  INSERT INTO CAPTCHA_IMAGE(IMAGE_BLOB, FILE_NAME)
    VALUES(EMPTY_BLOB(), pFILE_NAME) RETURNING IMAGE_BLOB INTO L_BLOB;
  L_BFILE := BFILENAME( DIR_NAME, pFILE_NAME );
  DBMS_LOB.FILEOPEN( L_BFILE );
  DBMS_LOB.LOADFROMFILE( L_BLOB, L_BFILE,DBMS_LOB.GETLENGTH( L_BFILE ) );
  DBMS_LOB.FILECLOSE( L_BFILE );
--  insert into CAPTCHA_IMAGE(IMAGE_BLOB, FILE_NAME)
    --values(L_BLOB, pFILE_NAME);
  commit;
END;    
--
FUNCTION GET_CAPTCHA_VALUE(
  pFILE_NAME IN VARCHAR2
  ) RETURN VARCHAR2 IS
  CURSOR C IS
    SELECT STR_VALUE
      FROM CAPTCHA_IMAGE
      WHERE FILE_NAME = pFILE_NAME;
  DUMMY C%ROWTYPE; 
  dir_name varchar2(300 char);
BEGIN
  OPEN C;
  FETCH C INTO DUMMY;
  IF C%FOUND THEN
    RETURN nvl(DUMMY.STR_VALUE, 'null');
  ELSE
    RETURN 'null';
  END IF;
  CLOSE C;
END; 
--
END; 