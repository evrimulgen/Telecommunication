CREATE TABLE ABONENT_BALANCE_HISTORY(
  ABONENT_BALANCE_HISTORY_ID Integer NOT NULL,
  ABONENT_ID Integer NOT NULL,
  HISTORY_DATE Date NOT NULL,
  AMOUNT Number(10,2) NOT NULL,
  BALANCE_AFTER Number(10, 2) NOT NULL,
  SERVICE_TYPE_ID Integer NOT NULL,
  USER_CREATED Varchar2(30 ),
  DATE_CREATED Date NOT NULL,
  USER_LAST_UPDATED Varchar2(30 ),
  DATE_LAST_UPDATED Date,
  IVIDEON_PAYMENT_ID INTEGER,
  PAYMENT_PURPOSE_ID INTEGER,
  IVIDEON_REQUEST_ID INTEGER
)
/

  
COMMENT ON TABLE ABONENT_BALANCE_HISTORY IS 'История балансов пользователей при поступлении/списании средств'
/
COMMENT ON COLUMN ABONENT_BALANCE_HISTORY.ABONENT_BALANCE_HISTORY_ID IS 'Идентификатор записи'
/
COMMENT ON COLUMN ABONENT_BALANCE_HISTORY.ABONENT_ID IS 'Идентификатор пользователя системы IVIDEON_ABONENTS.ABONENTN_ID'
/
COMMENT ON COLUMN ABONENT_BALANCE_HISTORY.HISTORY_DATE IS 'Дата списания суммы'
/
COMMENT ON COLUMN ABONENT_BALANCE_HISTORY.AMOUNT IS 'Сумма списания'
/
COMMENT ON COLUMN ABONENT_BALANCE_HISTORY.BALANCE_AFTER IS 'Баланс после списания платы'
/
COMMENT ON COLUMN ABONENT_BALANCE_HISTORY.SERVICE_TYPE_ID IS 'Тип списания'
/
COMMENT ON COLUMN ABONENT_BALANCE_HISTORY.USER_CREATED IS 'Создавший пользователь'
/
COMMENT ON COLUMN ABONENT_BALANCE_HISTORY.DATE_CREATED IS 'Дата создания записи'
/
COMMENT ON COLUMN ABONENT_BALANCE_HISTORY.USER_LAST_UPDATED IS 'Последний обновивший пользователь'
/
COMMENT ON COLUMN ABONENT_BALANCE_HISTORY.DATE_LAST_UPDATED IS 'Дата последнего обноления'
/
COMMENT ON COLUMN ABONENT_BALANCE_HISTORY.IVIDEON_PAYMENT_ID IS 'Идентификатор платежа в системе IVIDEON';

COMMENT ON COLUMN ABONENT_BALANCE_HISTORY.PAYMENT_PURPOSE_ID IS 'Идентификатор назначения платежа (PAYMENT_PURPOSE_TYPE.PAYMENT_PURPOSE_ID)';

COMMENT ON COLUMN ABONENT_BALANCE_HISTORY.IVIDEON_REQUEST_ID IS 'Идентификатор запроса, согласно которому было списание (IVIDEON_REQUEST_LOG.REQUEST_ID)';

ALTER TABLE ABONENT_BALANCE_HISTORY ADD (
  CONSTRAINT FK_IV_ABONENT_ID
  FOREIGN KEY (ABONENT_ID) 
  REFERENCES IVIDEON_ABONENTS (ABONENT_ID)
  );
  
ALTER TABLE ABONENT_BALANCE_HISTORY ADD (
  CONSTRAINT FK_SERVICE_TYPE_ID
  FOREIGN KEY (SERVICE_TYPE_ID) 
  REFERENCES SERVICE_TYPES (SERVICE_TYPE_ID)
  );  
  
CREATE SEQUENCE S_AB_BALANCE_HIST_ABONENTS_ID
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1;
  
CREATE OR REPLACE TRIGGER TIU_ABONENT_BALANCE_HISTORY
  BEFORE INSERT OR UPDATE ON ABONENT_BALANCE_HISTORY
  REFERENCING NEW AS NEW OLD AS OLD
  FOR EACH ROW
BEGIN
  
  IF INSERTING THEN
    if nvl(:new.ABONENT_BALANCE_HISTORY_ID, 0) = 0 then
      :new.ABONENT_BALANCE_HISTORY_ID := S_AB_BALANCE_HIST_ABONENTS_ID.NEXTVAL;
    END IF;
    
    :NEW.USER_CREATED := USER;
    :NEW.DATE_CREATED := SYSDATE;
  END IF;
  
  IF UPDATING THEN
    :NEW.USER_LAST_UPDATED := USER;
    :NEW.DATE_LAST_UPDATED := SYSDATE;
  END IF;
END;
/    

ALTER TABLE ABONENT_BALANCE_HISTORY ADD( TARIFF_ID Integer);

COMMENT ON COLUMN ABONENT_BALANCE_HISTORY.TARIFF_ID IS 'Идентификатор тарифа, для которого было списание абон.платы';


ALTER TABLE ABONENT_BALANCE_HISTORY ADD (
  CONSTRAINT FK_TARIFF_ID3
  FOREIGN KEY (TARIFF_ID) 
  REFERENCES TARIFFS (TARIFF_ID)
  );