Для повышения гибкости исполнения SQL-скриптов синтаксис был расширен.
Расширения синтаксиса позволяют многократно исполнять SQL-скрипты и пакеты 
скриптов без ущерба для схемы и базы данных.

В скрипте с помощью специальных тэгов указываются условия. В зависимости
от выполнения этих условий блок, заключенный между тэгами, пойдет на
исполнение в БД, или не пойдет.

Теги могут быть вложенными.

Расширения синтаксиса SQL:

--#EXECUTE вызов процедуры [:вызов процедуры [:...]]
--#EXEC вызов процедуры [:вызов процедуры [:...]]
выполняет процедуру VBScript (встроенную, либо определенную в файле RSS.vbs).
Перечень встроенных функций и процедур см. ниже.

--#MSGBOX выражение
Вычисляет выражение, пишет его в LOG-файл, и отображает его на 
устройство вывода (как сообщение Windows, если скрипт запущен с
помощью WScript.exe, или на консоль, если скрипт запущен с помощью CScript.exe)

--#IF условие THEN
  Блок, который будет исполнен только в том случае, если условие истинно
--#END IF или --#ENDIF

Условие является выражением VBScript, в нем допускается использовать 
операторы AND, OR, XOR, скобки и т.п. Также можно вызывать встроенные функции.


Встроенные функции:

ObjectExists("Имя_объекта")
 ' возвращает True/False

TableExists("Имя_таблицы")
  ' возвращает True/False

ColumnExists("Имя_таблицы.Имя_столбца")
 ' возвращает True/False

ColumnNullable("Имя_таблицы.Имя_столбца")
 ' возвращает True/False

GetVersion("Имя_объекта")
 ' возвращает номер версии, или 0, если объект
 ' не существует, или версия в нем отсутствует

GetColumnSize("Имя_таблицы.Имя_столбца")
 ' возвращает размер столбца, или 0 (для числовх полей всегда возвращается 22 !!!)

GetColumnPrecision("Имя_таблицы.Имя_столбца")
 ' возвращает количество знаков числового столбца, или 0

GetColumnType("Имя_таблицы.Имя_столбца")
 ' возвращает тип столбца, или ""

GetColumnDefault("Имя_таблицы.Имя_столбца")
 ' Возвращает значение поля по умолчанию 

RecordExists(SQL)
 ' возвращает True, если существуют строки по условию, иначе False

GetColumnComment("Имя_таблицы.Имя_столбца")
 ' возвращает комментарий столбца, или ""

GetConstraintCondition("Имя_ограничения")
 ' возвращает текст CHECK-ограничения, или ""

GetOracleVersion
 ' возвращает номер версии Oracle (8, 9 и т.п.)

CheckDeleteNoNameConstraint(TableColumnName, ConstraintType)
 ' Пытается удалить первое найденное неименованное ограничение на указанную колонку 
  (True - если нашли такой)
  ConstraintType
     C - Check
     P - Primary Key
     R - Referential Integrity
     U - Unique Key
     V - Check Option on a view

GetConstraintDeleteRule(ConstraintName)
 ' проверяет CONSTRAINT и возвращает CASCADE, если он на каскадное удаление

Встроенные процедуры:

LoadBlob("Имя_таблицы", "Имя_BLOB_поля", "Имя_ключевого_поля", "Значение_ключевого_поля", "Имя_файла")
' Загружает двоичные данные из файла в поле таблицы по условию (ключевое_поле=значение).



В текстах SQL-запрсов можно использовать знак & (амперсанд) для подстановки 
значения из переменных. например:

--#Execute MAIN_SCHEMA="SDV"
UPDATE CONSTANTS SET VALUE='&MAIN_SCHEMA' WHERE NAME='SCHEMA_NAME';

В данном примере сначала присваивается значение переменной MAIN_SCHEMA,
а затем это значение используется в SQL-запросе.


Для использования расширений SQL необходимо запускать скрипт 
с помощью утилиты Run SQL Scripts 
(intec-srv\Users.hom\Общие изменения структуры\Cmd\rss.vbs). 
В результате обработки формируется итоговый файл. его имя соответствует 
Имя_машины.sql, где имя машины -
компьютер, с которого утилита была запущена.
После обработки у пользователя запрашивается, нужно ли исполнять 
итоговый скрипт в SQL Plus (если не задан параметр -NoExec[ute]).


Пример скрипта:

--#IF not ColumnExists("ADDRESSES.ADDRESS_CC") then
  ALTER TABLE ADDRESSES ADD ( ADDRESS_CC VARCHAR2(50) );        
  comment on column ADDRESSES.ADDRESS_CC is 
  'Комментарий на элементе адреса';
--#ENDIF

Запрос ALTER TABLE... будет выполнен, только если столбец ADDRESSES.ADDRESS_CC
не существует в БД. Если этот столбец уже существует, то запрос не будет выполнен.

Для "проигрывания" скриптов рекомендуется установить Windows Script Host 5.6
(intec-srv\Users.hom\Общие изменения структуры\Distrib\Scriptru.exe).


Запуск скриптов выполняется с помощью DOS-команды:
cscript.exe rss.vbs имя_файла_скрипта [строка_соединения] [-параметры]

имя_файла_скрипта - имя файла, который должен быть выполнен

строка_соединения - строка вида имя_схемы/пароль@сервер, либо строка соединения ADO.

Параметры:

-V[erbose]
  подробный вывод выполняемых действия. По умолчанию выключен.

-S[eparate]
  запускать отдельный экземпляр SQL Plus для каждого блока кода.
  По умолчанию отдельный экземпляр SQL Plus будет запускаться, только если в 
  системе установлены старые библиотеки Windows Script Host.

-NoExec[ute]
  не запускать SQL Plus и не исполнять запросы (только сформировать список 
  необходимых изменений). Если параметр не задан, то будет открыт диалог с вопросом.

-Out Имя_выходного_файла
  Используется для генерации одного файла из набора скриптов.
  Выводится текст всех обработанных скриптов в один файл "Имя_выходного_файла" 
  без проверки условий и без выполнения конструкций --#... 
  Вместо конструкций @Имя_включаемого файла текст включаемого файла
  добавляется к выходному файлу
  Все конструкции --#.. выводятся в выходной файл.
  SQL Plus в этом режиме не запускается, соединение с БД не производится, 
  параметр "Строка соединения" не используется, указывать его не нужно.


Если в системе зарегистрированы библиотеки IntecScriptWizard.dll и IntecDB.dll,
то в режиме "не запускать SQL Plus" также откроется окно "Мастер выполнения SQL-скриптов".
Примечание: Независимо от результатов запуска скриптов в мастере, нужно выполнить итоговую 
прогонку скриптов в режиме запуска SQL Plus (некоторые возможности - например, загрузку
BLOB-полей - мастер пока не поддерживает).

