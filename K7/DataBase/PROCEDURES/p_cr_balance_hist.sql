CREATE OR REPLACE PROCEDURE P_CR_BALANCE_HIST(
  onlycontracts IN NUMBER DEFAULT NULL,-- по контрактам с договором
  p_exist_contract IN NUMBER DEFAULT NULL -- по контрактом с открытым договором
  ) is
-- Version = 2
--
-- 2 2015.10.30.  райнов. ”станение удалчени€ из IOT_CURRENT_BALANCE.
  CURSOR C_DBL IS --все номера (и с контрактом и без)
    SELECT DISTINCT(DBL.PHONE_NUMBER) PHONE_NUMBER 
      FROM DB_LOADER_ACCOUNT_PHONES DBL;
  CURSOR C_CONTR(EXST NUMBER) IS --курсор по контрактам (если exst!=null) то по действующим
    SELECT C.PHONE_NUMBER_FEDERAL 
      FROM CONTRACTS C, CONTRACT_CANCELS CC
      WHERE C.CONTRACT_ID=CC.CONTRACT_ID(+)
        AND (CC.CONTRACT_CANCEL_ID IS NOT NULL OR EXST IS NULL)
      GROUP BY C.PHONE_NUMBER_FEDERAL;
  CURSOR C_HIST(P_PHONE NUMBER) IS--курсор по истории балансов с блокировкой
    SELECT BH.PHONE_NUMBER, BH.BALANCE, BH.LAST_UPDATE 
      FROM IOT_BALANCE_HISTORY BH 
      WHERE BH.PHONE_NUMBER=P_PHONE 
        AND BH.END_TIME IS NULL;
  CURSOR HIST_WT(WT_PHONE NUMBER) IS --курсор по истории балансов с типами
    SELECT I.UPDATE_TYPE , I.BHWT_ID, I.BALANCE
      FROM IOT_BALANCE_HISTORY_WITH_TYPE I
      WHERE I.PHONE_NUMBER=WT_PHONE
        AND I.BHWT_ID = (SELECT MAX(I2.BHWT_ID) 
                           FROM IOT_BALANCE_HISTORY_WITH_TYPE I2
                           WHERE I2.PHONE_NUMBER=I.PHONE_NUMBER);
  PHONE_NUMBER DB_LOADER_ACCOUNT_PHONES.PHONE_NUMBER%TYPE;
  OLD_HISTORY C_HIST%ROWTYPE;
  HISTORY_BALANCE NUMBER;
  HISTORY_WT HIST_WT%ROWTYPE;
--
BEGIN
  IF ONLYCONTRACTS IS NOT NULL THEN 
    OPEN C_CONTR(P_EXIST_CONTRACT);
  ELSE 
    OPEN C_DBL;
  END IF;      
  LOOP--C_CONTR
    IF ONLYCONTRACTS IS NOT NULL THEN 
      FETCH C_CONTR INTO PHONE_NUMBER; 
      EXIT WHEN C_CONTR%NOTFOUND;
    ELSE 
      FETCH C_DBL INTO PHONE_NUMBER;
      EXIT WHEN C_DBL%NOTFOUND;
    END IF;          
    HISTORY_BALANCE := GET_ABONENT_BALANCE(PHONE_NUMBER);
    -----
    OPEN C_HIST(PHONE_NUMBER);            
    FETCH C_HIST INTO OLD_HISTORY;
    IF C_HIST%NOTFOUND THEN
      INSERT INTO IOT_BALANCE_HISTORY(PHONE_NUMBER, START_TIME, END_TIME, LAST_UPDATE, BALANCE) 
        VALUES(PHONE_NUMBER, SYSDATE, NULL, SYSDATE, HISTORY_BALANCE);              
    ELSIF HISTORY_BALANCE != OLD_HISTORY.BALANCE THEN
      UPDATE IOT_BALANCE_HISTORY T 
        SET T.END_TIME=SYSDATE 
        WHERE T.PHONE_NUMBER = OLD_HISTORY.PHONE_NUMBER 
          AND T.END_TIME IS NULL;                   
      INSERT INTO IOT_BALANCE_HISTORY(PHONE_NUMBER, START_TIME, END_TIME, LAST_UPDATE, BALANCE) 
        VALUES(PHONE_NUMBER, SYSDATE, NULL, SYSDATE, HISTORY_BALANCE);
    ELSE
      UPDATE IOT_BALANCE_HISTORY T 
        SET T.LAST_UPDATE=SYSDATE 
        WHERE T.PHONE_NUMBER=OLD_HISTORY.PHONE_NUMBER 
          AND T.END_TIME IS NULL;
    END IF;
    COMMIT;
    CLOSE C_HIST;
    ------
    OPEN HIST_WT(PHONE_NUMBER);            
    FETCH HIST_WT INTO HISTORY_WT;
    IF HISTORY_BALANCE != NVL(HISTORY_WT.BALANCE,0) THEN
      IF (HIST_WT%NOTFOUND) OR (HISTORY_WT.UPDATE_TYPE != 41) THEN
        INSERT INTO IOT_BALANCE_HISTORY_WITH_TYPE(PHONE_NUMBER, LAST_UPDATE, UPDATE_TYPE, BALANCE)
          VALUES(PHONE_NUMBER, SYSDATE, 41, HISTORY_BALANCE);
      ELSE
        UPDATE IOT_BALANCE_HISTORY_WITH_TYPE WT 
          SET WT.BALANCE=HISTORY_BALANCE, 
              WT.LAST_UPDATE=SYSDATE 
          WHERE WT.BHWT_ID=HISTORY_WT.BHWT_ID;
      END IF;                               
    END IF;
    COMMIT;
    CLOSE HIST_WT; 
  END LOOP;--C_CONTR
  --ќЅЌќ¬Ћяћ ƒјЌЌџ≈ ¬ IOT_CURRENT_BALANCE
  --EXECUTE IMMEDIATE 'TRUNCATE TABLE IOT_CURRENT_BALANCE';
  INSERT INTO IOT_CURRENT_BALANCE_TEMP(PHONE_NUMBER, LAST_UPDATE, UPDATE_TYPE, BALANCE)
    SELECT T.PHONE_NUMBER, T.LAST_UPDATE, 1, T.BALANCE 
      FROM IOT_BALANCE_HISTORY T 
      WHERE T.LAST_UPDATE = (SELECT MAX(M.LAST_UPDATE) 
                               FROM IOT_BALANCE_HISTORY M 
                               WHERE M.PHONE_NUMBER=T.PHONE_NUMBER);
  MERGE INTO IOT_CURRENT_BALANCE CB
    USING (SELECT * FROM IOT_CURRENT_BALANCE_TEMP) CBT
      ON (CB.PHONE_NUMBER = CBT.PHONE_NUMBER)
    WHEN MATCHED THEN
      UPDATE SET CB.LAST_UPDATE = CBT.LAST_UPDATE,
                 CB.UPDATE_TYPE = CBT.UPDATE_TYPE,
                 CB.BALANCE = CBT.BALANCE
    WHEN NOT MATCHED THEN 
      INSERT(CB.PHONE_NUMBER, CB.LAST_UPDATE, CB.UPDATE_TYPE, CB.BALANCE)
        VALUES(CBT.PHONE_NUMBER, CBT.LAST_UPDATE, CBT.UPDATE_TYPE, CBT.BALANCE);                             
  COMMIT;
END P_CR_BALANCE_HIST;
/