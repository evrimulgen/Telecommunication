
  CREATE OR REPLACE TRIGGER "CORP_MOBILE"."BUI_DB_LOADER_ACC_PHONES" 
BEFORE INSERT OR UPDATE
ON DB_LOADER_ACCOUNT_PHONES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
declare
  CURSOR C(YM IN INTEGER, PH IN VARCHAR2) IS
    SELECT *
      FROM DB_LOADER_PHONE_PERIODS DB
      WHERE DB.YEAR_MONTH = YM
        AND DB.PHONE_NUMBER = PH;
  vDUMMY C%ROWTYPE;
  CURSOR H(PH IN VARCHAR2, CH IN DATE) IS
    SELECT *
      FROM DB_LOADER_ACCOUNT_PHONE_HISTS D
      WHERE D.PHONE_NUMBER = PH
        AND D.BEGIN_DATE <= CH
        AND D.END_DATE >= CH;
  vDUMMY_H H%ROWTYPE;  
  CURSOR Q(aPHONE_NUMBER IN VARCHAR2, aPHONE_IS_ACTIVE IN NUMBER, aCELL_PLAN_CODE IN VARCHAR2, aSTATUS_ID IN INTEGER, aDATE_REPORT IN DATE) IS
    SELECT * 
      FROM QUEUE_UPDATE_PHONE_HISTORY QU
      WHERE QU.PHONE_NUMBER = aPHONE_NUMBER
        AND QU.PHONE_IS_ACTIVE = aPHONE_IS_ACTIVE
        AND QU.CELL_PLAN_CODE = aCELL_PLAN_CODE
        AND QU.STATUS_ID = aSTATUS_ID
        AND QU.DATE_REPORT < aDATE_REPORT
        AND NOT EXISTS (SELECT 1
                          FROM QUEUE_UPDATE_PHONE_HISTORY QI
                          WHERE QU.PHONE_NUMBER = QI.PHONE_NUMBER
                            AND QU.DATE_REPORT < QI.DATE_REPORT
                            AND (QU.PHONE_IS_ACTIVE <> QI.PHONE_IS_ACTIVE
                                  OR QU.CELL_PLAN_CODE <> QI.CELL_PLAN_CODE
                                  OR QU.STATUS_ID <> QI.STATUS_ID));  
  Q_DUMMY Q%ROWTYPE;                                  
begin
  :new.last_check_date_time:=sysdate;
  OPEN C(:NEW.YEAR_MONTH, :NEW.PHONE_NUMBER);
  FETCH C INTO vDUMMY;
  IF C%FOUND THEN
    UPDATE DB_LOADER_PHONE_PERIODS DB
      SET DB.ACCOUNT_ID = :NEW.ACCOUNT_ID,
          DB.TARIFF_CODE = :NEW.CELL_PLAN_CODE
      WHERE DB.YEAR_MONTH = :NEW.YEAR_MONTH 
        AND DB.PHONE_NUMBER = :NEW.PHONE_NUMBER;
  ELSE
    INSERT INTO DB_LOADER_PHONE_PERIODS(YEAR_MONTH, PHONE_NUMBER, ACCOUNT_ID, TARIFF_CODE)
      VALUES(:NEW.YEAR_MONTH, :NEW.PHONE_NUMBER, :NEW.ACCOUNT_ID, :NEW.CELL_PLAN_CODE);
  END IF;
  CLOSE C;  
  OPEN H(:NEW.PHONE_NUMBER, :new.last_check_date_time);
  FETCH H INTO vDUMMY_H;
  IF H%FOUND THEN
    IF NVL(:new.PHONE_IS_ACTIVE, 0) <> NVL(vDUMMY_H.PHONE_IS_ACTIVE, 0) 
        OR NVL(:new.CELL_PLAN_CODE, '0') <> NVL(vDUMMY_H.CELL_PLAN_CODE, '0') 
        OR NVL(:new.CONSERVATION, 0) <> NVL(vDUMMY_H.CONSERVATION, 0) 
        OR NVL(:new.SYSTEM_BLOCK, 0) <> NVL(vDUMMY_H.SYSTEM_BLOCK, 0)
        OR NVL(:new.STATUS_ID, 0) <> NVL(vDUMMY_H.STATUS_ID, 0) THEN
      OPEN Q(:NEW.PHONE_NUMBER, :new.PHONE_IS_ACTIVE, :new.CELL_PLAN_CODE, :new.STATUS_ID, :new.last_check_date_time);
      FETCH Q INTO Q_DUMMY;
      IF Q%NOTFOUND THEN
        INSERT INTO QUEUE_UPDATE_PHONE_HISTORY(PHONE_NUMBER,PHONE_IS_ACTIVE,CELL_PLAN_CODE,CONSERVATION,SYSTEM_BLOCK,STATUS_ID,DATE_REPORT)
          VALUES(:NEW.PHONE_NUMBER, :new.PHONE_IS_ACTIVE, :new.CELL_PLAN_CODE, :new.CONSERVATION, :new.SYSTEM_BLOCK, :new.STATUS_ID, :new.last_check_date_time);
      END IF;
      CLOSE Q;
     /* UPDATE DB_LOADER_ACCOUNT_PHONE_HISTS D
        SET D.END_DATE = :new.last_check_date_time - 1/24/60/60  --  -1sec
        WHERE D.PHONE_NUMBER = :NEW.PHONE_NUMBER
          AND D.BEGIN_DATE <= :new.last_check_date_time
          AND D.END_DATE >= :new.last_check_date_time;
        INSERT INTO DB_LOADER_ACCOUNT_PHONE_HISTS(PHONE_NUMBER, BEGIN_DATE, END_DATE, PHONE_IS_ACTIVE, 
                                                  CELL_PLAN_CODE, CONSERVATION, SYSTEM_BLOCK, STATUS_ID)
          VALUES(:NEW.PHONE_NUMBER, :new.last_check_date_time, vDUMMY_H.END_DATE, :new.PHONE_IS_ACTIVE, 
                 :new.CELL_PLAN_CODE, :new.CONSERVATION, :new.SYSTEM_BLOCK, :new.STATUS_ID);
      if vDUMMY_H.END_DATE = TO_DATE('01.01.3000','DD.MM.YYYY') then        
        UPDATE DB_LOADER_ACCOUNT_PHONE_HISTS D
          SET D.PHONE_IS_ACTIVE = :new.PHONE_IS_ACTIVE,
              D.CELL_PLAN_CODE = :new.CELL_PLAN_CODE,
              D.CONSERVATION = :new.CONSERVATION,
              D.SYSTEM_BLOCK = :new.SYSTEM_BLOCK,
              D.STATUS_ID = :new.STATUS_ID              
          WHERE D.PHONE_NUMBER = :NEW.PHONE_NUMBER
            AND D.BEGIN_DATE > :new.last_check_date_time
            AND D.END_DATE > :new.last_check_date_time;
      end if;    */       
    END IF;
  ELSE
    INSERT INTO DB_LOADER_ACCOUNT_PHONE_HISTS(PHONE_NUMBER, BEGIN_DATE, END_DATE, PHONE_IS_ACTIVE, 
                                              CELL_PLAN_CODE, CONSERVATION, SYSTEM_BLOCK, STATUS_ID)
      VALUES(:NEW.PHONE_NUMBER, :new.last_check_date_time, TO_DATE('01.01.3000','DD.MM.YYYY'), :new.PHONE_IS_ACTIVE, 
             :new.CELL_PLAN_CODE, :new.CONSERVATION, :new.SYSTEM_BLOCK, :new.STATUS_ID);
  END IF;
  CLOSE H;
  
   update MNP_REMOVE SET 
           is_active     = 1,
           date_activate = SYSDATE
    WHERE phone_number = :NEW.PHONE_NUMBER
      AND is_active = 0;
  
end ;
ALTER TRIGGER "CORP_MOBILE"."BUI_DB_LOADER_ACC_PHONES" ENABLE