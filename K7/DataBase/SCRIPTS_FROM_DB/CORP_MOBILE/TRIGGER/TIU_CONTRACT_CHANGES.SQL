
  CREATE OR REPLACE TRIGGER "CORP_MOBILE"."TIU_CONTRACT_CHANGES" 
  BEFORE INSERT OR UPDATE ON CONTRACT_CHANGES FOR EACH ROW
--#Version=4
DECLARE
CURSOR C IS
  SELECT DB_LOADER_ACCOUNT_PHONE_HISTS.*
    FROM DB_LOADER_ACCOUNT_PHONE_HISTS,
         CONTRACTS
    WHERE DB_LOADER_ACCOUNT_PHONE_HISTS.PHONE_NUMBER=CONTRACTS.PHONE_NUMBER_FEDERAL
      AND CONTRACTS.CONTRACT_ID=:NEW.CONTRACT_ID
    ORDER BY DB_LOADER_ACCOUNT_PHONE_HISTS.END_DATE DESC;
rec C%ROWTYPE;   
CURSOR C1(pDATE IN DATE, pCONTRACT_ID IN INTEGER ) IS
  SELECT DB_LOADER_ACCOUNT_PHONE_HISTS.*
    FROM DB_LOADER_ACCOUNT_PHONE_HISTS,
         CONTRACTS
    WHERE CONTRACTS.CONTRACT_ID=pCONTRACT_ID
      AND DB_LOADER_ACCOUNT_PHONE_HISTS.PHONE_NUMBER=CONTRACTS.PHONE_NUMBER_FEDERAL
      AND DB_LOADER_ACCOUNT_PHONE_HISTS.END_DATE > pDATE + 10/60/60/24  --   +10sec
      AND DB_LOADER_ACCOUNT_PHONE_HISTS.BEGIN_DATE < pDATE - 10/60/60/24  --   -10sec
    ORDER BY DB_LOADER_ACCOUNT_PHONE_HISTS.END_DATE DESC; 
rec1 C1%ROWTYPE;    
DATE_NOW DATE;
vDATE_CONTRACT_CHANGE DATE;
vPHONE_NUMBER VARCHAR2(10 CHAR);
vSTART INTEGER;
vEND INTEGER;
I INTEGER;
J INTEGER;
BEGIN
  SELECT C.PHONE_NUMBER_FEDERAL INTO vPHONE_NUMBER
    FROM CONTRACTS C
    WHERE C.CONTRACT_ID = :NEW.CONTRACT_ID; 
  IF INSERTING THEN
    -- Создание записи о оплате, если сумма ненулевая
    IF :NEW.SUM_GET IS NOT NULL THEN
      INSERT INTO RECEIVED_PAYMENTS(PHONE_NUMBER, PAYMENT_SUM, PAYMENT_DATE_TIME, 
                                    CONTRACT_ID, IS_CONTRACT_PAYMENT, FILIAL_ID,
                                    PAYMENT_ANNUL_FLAG, REMARK, RECEIVED_PAYMENT_TYPE_ID)
        VALUES(vPHONE_NUMBER, -:NEW.SUM_GET, :NEW.CONTRACT_CHANGE_DATE,
               :NEW.CONTRACT_ID, 0, :NEW.FILIAL_ID,
               0, 'Оплата за смену ТП', 21);
    END IF;
    -- Прерывание в истории для создания разрыва отрезка времени (особенно актуально для одноосновных тарифов)
    -- Прерывание по дате добавления
    OPEN C;
    FETCH C INTO rec;
    IF C%FOUND THEN
      DATE_NOW:=SYSDATE;
      UPDATE DB_LOADER_ACCOUNT_PHONE_HISTS
        SET DB_LOADER_ACCOUNT_PHONE_HISTS.END_DATE=DATE_NOW - 1/24/60/60 -- Уменьшим на 1 секунду
        WHERE DB_LOADER_ACCOUNT_PHONE_HISTS.HISTORY_ID=rec.HISTORY_ID;
      INSERT INTO DB_LOADER_ACCOUNT_PHONE_HISTS(PHONE_NUMBER, BEGIN_DATE, END_DATE,PHONE_IS_ACTIVE, CELL_PLAN_CODE)
        VALUES(rec.PHONE_NUMBER, DATE_NOW, rec.END_DATE, rec.PHONE_IS_ACTIVE, rec.CELL_PLAN_CODE);
      INSERT INTO PHONES_TARIF_FOR_RECALC (PHONE_NUMBER) VALUES (rec.PHONE_NUMBER);
      --commit;  
    END IF;
    CLOSE C;
    -- Прерывание в истории для создания разрыва отрезка времени (особенно актуально для одноосновных тарифов)
    -- Прерывание по дате добавления
    vDATE_CONTRACT_CHANGE:=:NEW.CONTRACT_CHANGE_DATE;
    OPEN C1(vDATE_CONTRACT_CHANGE, :NEW.CONTRACT_ID);
    FETCH C1 INTO rec1;
    IF C1%FOUND THEN
      begin
        UPDATE DB_LOADER_ACCOUNT_PHONE_HISTS
          SET DB_LOADER_ACCOUNT_PHONE_HISTS.END_DATE=vDATE_CONTRACT_CHANGE - 1/24/60/60
          WHERE DB_LOADER_ACCOUNT_PHONE_HISTS.HISTORY_ID=rec1.HISTORY_ID;
        INSERT INTO DB_LOADER_ACCOUNT_PHONE_HISTS(PHONE_NUMBER, BEGIN_DATE, END_DATE, PHONE_IS_ACTIVE, CELL_PLAN_CODE)
          VALUES(rec1.PHONE_NUMBER, vDATE_CONTRACT_CHANGE, rec1.END_DATE, rec1.PHONE_IS_ACTIVE, rec1.CELL_PLAN_CODE);
        INSERT INTO PHONES_TARIF_FOR_RECALC(PHONE_NUMBER) 
          VALUES(rec1.PHONE_NUMBER);
      exception
        when others then
          null;
      end;
      --commit;  
    END IF;
    CLOSE C1;    
    -- Новые параметры по умолчанию
    IF NVL(:NEW.CONTRACT_CHANGE_ID, 0) = 0 then
      :NEW.CONTRACT_CHANGE_ID := NEW_CONTRACT_CHANGE_ID;
    END IF;
    :NEW.USER_CREATED := USER;
    :NEW.DATE_CREATED := SYSDATE;
  END IF;
  IF UPDATING THEN    
    -- Изменение записи о оплате, если сумма ненулевая
    IF (:NEW.SUM_GET<>:OLD.SUM_GET) OR (:NEW.CONTRACT_CHANGE_DATE<>:OLD.CONTRACT_CHANGE_DATE) THEN
      UPDATE RECEIVED_PAYMENTS
        SET PAYMENT_SUM=-:NEW.SUM_GET, PAYMENT_DATE_TIME=:NEW.CONTRACT_CHANGE_DATE
        WHERE PHONE_NUMBER = vPHONE_NUMBER
          AND PAYMENT_SUM=-:OLD.SUM_GET
          AND PAYMENT_DATE_TIME=:OLD.CONTRACT_CHANGE_DATE
          AND CONTRACT_ID =:OLD.CONTRACT_ID;
    END IF;
    --
    IF :NEW.CONTRACT_CHANGE_DATE <> :OLD.CONTRACT_CHANGE_DATE THEN
      -- Сменили дату изменения тарифа
      vDATE_CONTRACT_CHANGE:=:NEW.CONTRACT_CHANGE_DATE;
      OPEN C1(vDATE_CONTRACT_CHANGE, :NEW.CONTRACT_ID);
      FETCH C1 INTO rec1;
      IF C1%FOUND THEN
        begin
          UPDATE DB_LOADER_ACCOUNT_PHONE_HISTS
            SET DB_LOADER_ACCOUNT_PHONE_HISTS.END_DATE=vDATE_CONTRACT_CHANGE - 1/24/60/60
            WHERE DB_LOADER_ACCOUNT_PHONE_HISTS.HISTORY_ID=rec1.HISTORY_ID;
          INSERT INTO DB_LOADER_ACCOUNT_PHONE_HISTS(PHONE_NUMBER, BEGIN_DATE, END_DATE, PHONE_IS_ACTIVE, CELL_PLAN_CODE)
            VALUES(rec1.PHONE_NUMBER, vDATE_CONTRACT_CHANGE, rec1.END_DATE, rec1.PHONE_IS_ACTIVE, rec1.CELL_PLAN_CODE);
          INSERT INTO PHONES_TARIF_FOR_RECALC (PHONE_NUMBER) VALUES (rec1.PHONE_NUMBER);
        --commit;  
        exception
          when others then
            null;
        end;
      END IF;
      CLOSE C1; 
    END IF;
    IF :NEW.TARIFF_ID<>:OLD.TARIFF_ID THEN
      OPEN C;
      FETCH C INTO rec;
      IF C%FOUND THEN
        INSERT INTO PHONES_TARIF_FOR_RECALC (PHONE_NUMBER) VALUES (rec.PHONE_NUMBER);
        --commit;  
      END IF;
      CLOSE C;
    END IF;
  END IF;    
  vSTART:=TO_NUMBER(TO_CHAR(:NEW.CONTRACT_CHANGE_DATE, 'YYYYMM'));
  vEND:=TO_NUMBER(TO_CHAR(SYSDATE, 'YYYYMM'));
  FOR I IN TRUNC(vSTART/100)..TRUNC(vEND/100) 
  LOOP
    FOR J IN 1..12 
    LOOP
      IF (I*100 + J >= vSTART) AND (I*100 + J <= vEND) THEN
        INSERT INTO QUEUE_ABONENT_PER_REBILD(YEAR_MONTH, PHONE_NUMBER)
          VALUES(I*100 + J, vPHONE_NUMBER);
      END IF;
    END LOOP;
  END LOOP;
  :NEW.USER_LAST_UPDATED := USER;
  :NEW.DATE_LAST_UPDATED := SYSDATE;
END; 
ALTER TRIGGER "CORP_MOBILE"."TIU_CONTRACT_CHANGES" ENABLE