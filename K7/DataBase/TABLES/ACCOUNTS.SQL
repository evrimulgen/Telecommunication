--v1 
--30/03/2012 Nikolaev добавлены 2 оповещения о балансе
CREATE SEQUENCE S_NEW_ACCOUNT_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;



CREATE TABLE ACCOUNTS
(
  ACCOUNT_ID         INTEGER                    NOT NULL,
  OPERATOR_ID        INTEGER,
  ACCOUNT_NUMBER     NUMBER,
  LOGIN              VARCHAR2(30 CHAR),
  PASSWORD           VARCHAR2(30 CHAR),
  DO_AUTO_LOAD_DATA  NUMBER(1, 0) CHECK (DO_AUTO_LOAD_DATA IN (0, 1)),
  USER_CREATED       VARCHAR2(30 CHAR),
  DATE_CREATED       DATE,
  USER_LAST_UPDATED  VARCHAR2(30 CHAR),
  DATE_LAST_UPDATED  DATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE OR REPLACE FUNCTION NEW_ACCOUNT_ID RETURN NUMBER IS
--#Version=1
  vRES NUMBER;
BEGIN
  SELECT S_NEW_ACCOUNT_ID.NEXTVAL
  INTO vRES
  FROM DUAL;
  RETURN vRES;
END;

ALTER TABLE ACCOUNTS ADD (
  CONSTRAINT PK_ACCOUNTS
 PRIMARY KEY
 (ACCOUNT_ID));

ALTER TABLE ACCOUNTS ADD (
  CONSTRAINT FK_ACCOUNTS_OPERATOR_ID 
 FOREIGN KEY (OPERATOR_ID) 
 REFERENCES OPERATORS (OPERATOR_ID));

--ALTER TABLE ACCOUNTS ADD SYSTEM_JOB_ID INTEGER;

ALTER TABLE ACCOUNTS ADD LOAD_INTERVAL NUMBER(4, 2) DEFAULT 8;

--ALTER TABLE ACCOUNTS ADD PAYMENTS_JOB_ID INTEGER;

ALTER TABLE ACCOUNTS ADD PAY_LOAD_INTERVAL NUMBER(4, 2) DEFAULT 1;

ALTER TABLE ACCOUNTS DROP COLUMN SYSTEM_JOB_ID;

ALTER TABLE ACCOUNTS DROP COLUMN PAYMENTS_JOB_ID;

DROP TRIGGER TIU_ACCOUNTS;

CREATE OR REPLACE TRIGGER TIU_ACCOUNTS
--#Version=2 Соколов 19.08.2015 Добавление нового счета в таблицу ACCOUNT_LOADED_BILLS. Вынес создание джобов в процедуру CREATE_JOB_NEW_ACCOUNT.  
BEFORE INSERT OR UPDATE
ON ACCOUNTS 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DISABLE
DECLARE
  PRAGMA AUTONOMOUS_TRANSACTION;
  CURSOR C(AD IN INTEGER) IS
    SELECT *
      FROM ACCOUNT_LOADED_BILLS AB
      WHERE AB.ACCOUNT_ID = AD;
  vDUMMY C%ROWTYPE;
BEGIN
  IF INSERTING THEN
    IF NVL(:NEW.ACCOUNT_ID, 0) = 0 then
      :NEW.ACCOUNT_ID := NEW_ACCOUNT_ID;
    END IF;
    :NEW.USER_CREATED := USER;
    :NEW.DATE_CREATED := SYSDATE;
    -- Добавим JOB 
    CREATE_JOB_NEW_ACCOUNT(:NEW.ACCOUNT_ID, :NEW.PAY_LOAD_INTERVAL, :NEW.LOAD_INTERVAL, 1);
    --    
       OPEN C(:NEW.ACCOUNT_ID);
       FETCH C INTO vDUMMY;
       IF C%NOTFOUND THEN

          INSERT INTO ACCOUNT_LOADED_BILLS (ACCOUNT_ID, YEAR_MONTH, LOAD_BILL_IN_BALANCE)
                                    VALUES (:NEW.ACCOUNT_ID, TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM'), 1);
          COMMIT;                        
       END IF;
       CLOSE C;
       
  ELSIF UPDATING THEN
    
   --Изменение атрибутов JOB 
    CREATE_JOB_NEW_ACCOUNT(:NEW.ACCOUNT_ID, :NEW.PAY_LOAD_INTERVAL, :NEW.LOAD_INTERVAL);
    --
  END IF;
  :NEW.USER_LAST_UPDATED := USER;
  :NEW.DATE_LAST_UPDATED := SYSDATE;
END;
/




CREATE OR REPLACE TRIGGER TAD_ACCOUNTS
  AFTER DELETE ON ACCOUNTS FOR EACH ROW
--#Version=4
DECLARE
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  BEGIN
    DBMS_SCHEDULER.DROP_JOB('J_LOAD_DETAILS_'||:OLD.ACCOUNT_ID);
  EXCEPTION WHEN OTHERS THEN
    NULL; 
  END;
  BEGIN
    DBMS_SCHEDULER.DROP_JOB('J_LOAD_PAYMENTS_'||:OLD.ACCOUNT_ID);
  EXCEPTION WHEN OTHERS THEN
    NULL; 
  END;
  BEGIN
    DBMS_SCHEDULER.DROP_JOB('J_LOAD_BILL_'||:OLD.ACCOUNT_ID);
  EXCEPTION WHEN OTHERS THEN
    NULL; 
  END;
  BEGIN
    DBMS_SCHEDULER.DROP_JOB('J_LOAD_PHONES_'||:OLD.ACCOUNT_ID);
  EXCEPTION WHEN OTHERS THEN
    NULL; 
  END;
  BEGIN
    DBMS_SCHEDULER.DROP_JOB('J_LOAD_PHONE_OPTIONS_'||:OLD.ACCOUNT_ID);
  EXCEPTION WHEN OTHERS THEN
    NULL; 
  END;
  BEGIN
    DBMS_SCHEDULER.DROP_JOB('J_LOAD_REPORT_DATA_'||:OLD.ACCOUNT_ID);
  EXCEPTION WHEN OTHERS THEN
    NULL; 
  END;
  BEGIN
    DBMS_SCHEDULER.DROP_JOB('J_UNBLOCK_CLIENT_'||:OLD.ACCOUNT_ID);
  EXCEPTION WHEN OTHERS THEN
    NULL; 
  END;
  BEGIN
    DBMS_SCHEDULER.DROP_JOB('J_BLOCK_CLIENT_'||:OLD.ACCOUNT_ID);
  EXCEPTION WHEN OTHERS THEN
    NULL; 
  END;
  BEGIN
    DBMS_SCHEDULER.DROP_JOB('J_LOAD_BILL_DETAILS_'||:OLD.ACCOUNT_ID);
  EXCEPTION WHEN OTHERS THEN
    NULL; 
  END;
  BEGIN
    DBMS_SCHEDULER.DROP_JOB('J_LOAD_BILL_DETAILS_REV_'||:OLD.ACCOUNT_ID);
  EXCEPTION WHEN OTHERS THEN
    NULL; 
  END;
  BEGIN
    DBMS_SCHEDULER.DROP_JOB('J_LOAD_BEELINE_BILLS_'||:OLD.ACCOUNT_ID);
  EXCEPTION WHEN OTHERS THEN
    NULL; 
  END;
  BEGIN
    DBMS_SCHEDULER.DROP_JOB('J_LOAD_OBJ_ID_'||:OLD.ACCOUNT_ID);
  EXCEPTION WHEN OTHERS THEN
    NULL; 
  END;
  BEGIN
    DBMS_SCHEDULER.DROP_JOB('J_BLOCK_LOYAL_CLIENT_'||:OLD.ACCOUNT_ID);
  EXCEPTION WHEN OTHERS THEN
    NULL; 
  END;
end;
/


COMMENT ON TABLE ACCOUNTS IS 'Лицевые счета организации';

COMMENT ON COLUMN ACCOUNTS.ACCOUNT_ID IS 'Первичный ключ';

COMMENT ON COLUMN ACCOUNTS.OPERATOR_ID IS 'Код оператора сотовой связи';

COMMENT ON COLUMN ACCOUNTS.ACCOUNT_NUMBER IS 'Номер лицевого счета';

COMMENT ON COLUMN ACCOUNTS.LOGIN IS 'Логин (для сайта оператора)';

COMMENT ON COLUMN ACCOUNTS.PASSWORD IS 'Пароль (для сайта оператора)';

COMMENT ON COLUMN ACCOUNTS.DO_AUTO_LOAD_DATA IS 'Загружать данные автоматически';

COMMENT ON COLUMN ACCOUNTS.USER_CREATED IS 'Пользователь, создавший запись';

COMMENT ON COLUMN ACCOUNTS.DATE_CREATED IS 'Дата/время создания записи';

COMMENT ON COLUMN ACCOUNTS.USER_LAST_UPDATED IS 'Пользователь, редактировавший запись последним';

COMMENT ON COLUMN ACCOUNTS.DATE_LAST_UPDATED IS 'Дата/время последней редакции записи';

COMMENT ON COLUMN ACCOUNTS.LOAD_INTERVAL IS 'Интервал (периодичность) загрузки данных с сайта оператора в часах.';

COMMENT ON COLUMN ACCOUNTS.PAY_LOAD_INTERVAL IS 'Интервал (периодичность) загрузки платежей (часы)';


CREATE INDEX I_ACCOUNTS_OPERATOR_ID ON ACCOUNTS
(OPERATOR_ID)
LOGGING
NOPARALLEL;

CREATE INDEX I_ACCOUNTS_ACCOUNT_NUMBER ON ACCOUNTS(ACCOUNT_NUMBER);

/*
--  Создание SCHEDULE.JOBS при переводе с DBMS_JOB

BEGIN
  FOR rec IN (SELECT * FROM ACCOUNTS) LOOP 
    DBMS_SCHEDULER.CREATE_JOB(
      job_name   => 'J_LOAD_DETAILS_'||rec.ACCOUNT_ID,
      job_type   => 'PLSQL_BLOCK',
      job_action => 'BEGIN LOADER2_PCKG.LOAD_ACCOUNT_DATA('||rec.ACCOUNT_ID || '); END;',
      start_date => SYSDATE+10/24/60,
      repeat_interval => 'FREQ = MINUTELY; INTERVAL = 0'||REPLACE(60*NVL(rec.LOAD_INTERVAL, 1), ',', '.'),
      enabled    => TRUE
      );
    DBMS_SCHEDULER.CREATE_JOB(
      job_name   => 'J_LOAD_PAYMENTS_'||rec.ACCOUNT_ID,
      job_type   => 'PLSQL_BLOCK',
      job_action => 'BEGIN LOADER2_PCKG.LOAD_ACCOUNT_PAYMENT2('||rec.ACCOUNT_ID || '); END;',
      start_date => SYSDATE+2/24/60,
      repeat_interval => 'FREQ = MINUTELY; INTERVAL = 0'||REPLACE(60*NVL(rec.PAY_LOAD_INTERVAL, 1), ',', '.'),
      enabled    => TRUE
      );
  END LOOP;
END;

*/

ALTER TABLE ACCOUNTS ADD BALANCE_NOTICE_TEXT VARCHAR2(200 CHAR);

ALTER TABLE ACCOUNTS ADD BLOCK_NOTICE_TEXT VARCHAR2(200 CHAR);

ALTER TABLE ACCOUNTS ADD NEXT_MONTH_NOTICE_TEXT VARCHAR2(200 CHAR);

ALTER TABLE ACCOUNTS ADD NEXT_MONTH_NOTICE_BALANCE NUMBER;

UPDATE ACCOUNTS SET NEXT_MONTH_NOTICE_BALANCE='-200';

ALTER TABLE ACCOUNTS ADD LOAD_DETAIL_POOL_SIZE INTEGER DEFAULT 100;

ALTER TABLE ACCOUNTS ADD LOAD_DETAIL_THREAD_COUNT INTEGER DEFAULT 2;

COMMENT ON COLUMN ACCOUNTS.LOAD_DETAIL_POOL_SIZE IS 'Количество телефонов, для которых детализация загружается в одной сессии';

COMMENT ON COLUMN ACCOUNTS.LOAD_DETAIL_THREAD_COUNT IS 'Количество параллельных сессий для загрузки детализации';

ALTER TABLE ACCOUNTS ADD BALANCE_BLOCK INTEGER DEFAULT 0;

ALTER TABLE ACCOUNTS ADD DO_AUTO_BLOCK NUMBER(1, 0) DEFAULT 0 CHECK (DO_AUTO_BLOCK IN (0, 1));

ALTER TABLE ACCOUNTS ADD BALANCE_NOTICE INTEGER DEFAULT 100;

ALTER TABLE ACCOUNTS ADD DO_BALANCE_NOTICE NUMBER(1, 0) DEFAULT 0 CHECK (DO_BALANCE_NOTICE IN (0, 1));

ALTER TABLE ACCOUNTS ADD DO_BALANCE_NOTICE_MONTH NUMBER(1, 0) DEFAULT 0 CHECK (DO_BALANCE_NOTICE_MONTH IN (0, 1));

ALTER TABLE ACCOUNTS ADD BALANCE_NOTICE_END_MONTH INTEGER DEFAULT 200;

ALTER TABLE ACCOUNTS ADD BALANCE_NOTICE_CREDIT INTEGER;

COMMENT ON COLUMN ACCOUNTS.BALANCE_NOTICE_CREDIT IS 'Порог предупреждения у кредита';

ALTER TABLE ACCOUNTS ADD TEXT_NOTICE_BALANCE_CREDIT VARCHAR2(200 CHAR);

COMMENT ON COLUMN ACCOUNTS.TEXT_NOTICE_BALANCE_CREDIT IS 'Текст предупреждения у кредита';

ALTER TABLE ACCOUNTS ADD BALANCE_BLOCK_CREDIT INTEGER;

COMMENT ON COLUMN ACCOUNTS.BALANCE_BLOCK_CREDIT IS 'Порог отключения у кредита';

ALTER TABLE ACCOUNTS ADD TEXT_NOTICE_BLOCK_CREDIT VARCHAR2(200 CHAR);

COMMENT ON COLUMN ACCOUNTS.TEXT_NOTICE_BLOCK_CREDIT IS 'Текст отключения у кредита';

ALTER TABLE ACCOUNTS ADD BALANCE_NOTICE_MONTH_CREDIT INTEGER;

COMMENT ON COLUMN ACCOUNTS.BALANCE_NOTICE_MONTH_CREDIT IS 'Порог предупреждения в конце месяца у кредита';

ALTER TABLE ACCOUNTS ADD TEXT_NOTICE_END_MONTH_CREDIT VARCHAR2(200 CHAR);

COMMENT ON COLUMN ACCOUNTS.TEXT_NOTICE_END_MONTH_CREDIT IS 'Текст предупреждения в конце месяца у кредита';

ALTER TABLE ACCOUNTS ADD DILER_PAYMETS INTEGER;

COMMENT ON COLUMN ACCOUNTS.DILER_PAYMETS IS 'Признак наличия выплат дилерам на л/с';

ALTER TABLE ACCOUNTS ADD BALANCE_NOTICE2 INTEGER;

COMMENT ON COLUMN ACCOUNTS.BALANCE_NOTICE2 IS '2 Порог предупреждения у аванса';

ALTER TABLE ACCOUNTS ADD BALANCE_NOTICE_TEXT2 VARCHAR2(200 CHAR);

COMMENT ON COLUMN ACCOUNTS.BALANCE_NOTICE_TEXT2 IS '2 Текст предупреждения у аванса';

ALTER TABLE ACCOUNTS ADD BALANCE_NOTICE_CREDIT2 INTEGER;

COMMENT ON COLUMN ACCOUNTS.BALANCE_NOTICE_CREDIT2 IS '2 Порог предупреждения у кредита';

ALTER TABLE ACCOUNTS ADD TEXT_NOTICE_BALANCE_CREDIT2 VARCHAR2(200 CHAR);

COMMENT ON COLUMN ACCOUNTS.TEXT_NOTICE_BALANCE_CREDIT2 IS '2 Текст предупреждения у кредита';

ALTER TABLE ACCOUNTS ADD COMPANY_NAME VARCHAR2(30 CHAR);

COMMENT ON COLUMN ACCOUNTS.COMPANY_NAME IS 'Название компании';

ALTER TABLE ACCOUNTS ADD FILIAL_ID INTEGER;

COMMENT ON COLUMN ACCOUNTS.FILIAL_ID IS 'Филиал владелец';

-- Add/modify columns 
alter table ACCOUNTS add n_method varchar2(50);
alter table ACCOUNTS add new_pswd varchar2(30);
-- Add comments to the columns 
comment on column ACCOUNTS.n_method
  is 'ID загрузок которые формировать через новый кабинет';
comment on column ACCOUNTS.new_pswd
  is 'Пароль от нового кабинета';
  
  -- Add/modify columns 
alter table ACCOUNTS add is_collector number(1);
-- Add comments to the columns 
comment on column ACCOUNTS.is_collector
  is 'Признак коллекторского счета';


ALTER TABLE ACCOUNTS
MODIFY(BALANCE_NOTICE_TEXT VARCHAR2(300 CHAR));


ALTER TABLE ACCOUNTS
MODIFY(BLOCK_NOTICE_TEXT VARCHAR2(300 CHAR));


ALTER TABLE ACCOUNTS
MODIFY(NEXT_MONTH_NOTICE_TEXT VARCHAR2(300 CHAR));


ALTER TABLE ACCOUNTS
MODIFY(TEXT_NOTICE_BALANCE_CREDIT VARCHAR2(300 CHAR));


ALTER TABLE ACCOUNTS
MODIFY(TEXT_NOTICE_BLOCK_CREDIT VARCHAR2(300 CHAR));


ALTER TABLE ACCOUNTS
MODIFY(TEXT_NOTICE_END_MONTH_CREDIT VARCHAR2(300 CHAR));


ALTER TABLE ACCOUNTS
MODIFY(BALANCE_NOTICE_TEXT2 VARCHAR2(300 CHAR));


ALTER TABLE ACCOUNTS
MODIFY(TEXT_NOTICE_BALANCE_CREDIT2 VARCHAR2(300 CHAR));

--#if not ColumnExists("ACCOUNTS.DO_ROAMING_RETARIFICATION")
ALTER TABLE ACCOUNTS ADD DO_ROAMING_RETARIFICATION NUMBER(1);
COMMENT ON COLUMN ACCOUNTS.DO_ROAMING_RETARIFICATION IS 'Выполнять перетарификацию роуминга по данному счету: 1 - увеличить сумму для абонента, 2 - не менять стоимость услуг для абонента.';
--#end if

--#if not ColumnExists("ACCOUNTS.SMS_SENDER_NAME_ID")
ALTER TABLE ACCOUNTS ADD SMS_SENDER_NAME_ID Number(1);
COMMENT ON COLUMN ACCOUNTS.SMS_SENDER_NAME_ID IS 'Идентификатор имени, отображаемого в поле "От кого" при рассылке смс, берется из таблицы SMS_SENDER_NAME';
--#end if

--#if not ColumnExists("ACCOUNTS.SMS_SENDER_NAME_ID")
ALTER TABLE ACCOUNTS ADD SMS_SETT_ACCOUNTS Number(1);
COMMENT ON COLUMN ACCOUNTS.SMS_SETT_ACCOUNTS IS 'Отправлять текс смс из л/с настроек (как для кредитных л/с)';
--#end if
--#if not ColumnExists("ACCOUNTS.SMS_SENDER_NAME_ID")
ALTER TABLE ACCOUNTS ADD BALANCE_USSD_TEXT varchar2(500 char);
COMMENT ON COLUMN ACCOUNTS.BALANCE_USSD_TEXT IS 'Шаблон ответа для запроса баланса по USSD';
--#end if