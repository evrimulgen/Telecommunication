CREATE SEQUENCE S_NEW_BALANCE_ROW_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE TABLE BALANCE_DATA(
  BALANCE_ROW_ID INTEGER,
  PHONE_NUMBER NUMBER(10),
  YEAR_MONTH INTEGER,
  CHARGES_TYPE_ID INTEGER,
  CHARGES_DATE DATE,
  CHARGES_SUMM NUMBER(15, 4),
  CHARGES_COMMENT VARCHAR2(150 CHAR), 
  CONTRACT_ID INTEGER,
  IS_ACTIVE INT,
  TARIFF_ID INT,
  CONSTRAINT FK_BALANCE_DATA_TARIFF_ID
    FOREIGN KEY (TARIFF_ID)
    REFERENCES TARIFFS(TARIFF_ID),
  CONSTRAINT FK_BALANCE_CHARGES_TYPE_ID
    FOREIGN KEY(CHARGES_TYPE_ID)
    REFERENCES BALANCE_CHARGES_TYPES(CHARGES_TYPE_ID)
  );

COMMENT ON TABLE BALANCE_DATA IS 'Таблица с данными по балансу "НЕ УДАЛЯТЬ"'; 
COMMENT ON COLUMN BALANCE_DATA.BALANCE_ROW_ID IS 'ИД строки-начисления';
COMMENT ON COLUMN BALANCE_DATA.PHONE_NUMBER IS 'Телефон';
COMMENT ON COLUMN BALANCE_DATA.YEAR_MONTH IS 'Год и месяц начисления';
COMMENT ON COLUMN BALANCE_DATA.CHARGES_TYPE_ID IS 'Тип начисления';
COMMENT ON COLUMN BALANCE_DATA.CHARGES_DATE IS 'Дата начисления';
COMMENT ON COLUMN BALANCE_DATA.CHARGES_SUMM IS 'Сумма начисления';
COMMENT ON COLUMN BALANCE_DATA.CHARGES_COMMENT IS 'Примечание';
COMMENT ON COLUMN BALANCE_DATA.CONTRACT_ID IS 'ИД договора';
COMMENT ON COLUMN BALANCE_DATA.IS_ACTIVE IS 'Акт/Бл';
COMMENT ON COLUMN BALANCE_DATA.TARIFF_ID IS 'ИД тарифа';

CREATE OR REPLACE TRIGGER TIU_BALANCE_DATA_BEFORE
  BEFORE INSERT OR UPDATE ON BALANCE_DATA FOR EACH ROW
-- Version = 1  
DECLARE
  vCOUNT INTEGER; 
  vCONTR INTEGER; 
BEGIN
  IF :NEW.BALANCE_ROW_ID IS NULL THEN
    :NEW.BALANCE_ROW_ID:=S_NEW_BALANCE_ROW_ID.NEXTVAL; 
  END IF;
  IF :NEW.YEAR_MONTH IS NULL THEN
    :NEW.YEAR_MONTH:=TO_NUMBER(TO_CHAR(:NEW.CHARGES_DATE, 'YYYYMM')); 
  END IF;
  IF :NEW.IS_ACTIVE IS NULL THEN
    :NEW.IS_ACTIVE:=1; 
  END IF;
  IF :NEW.TARIFF_ID IS NULL THEN
    :NEW.TARIFF_ID:=-1; 
  END IF;
  IF :NEW.CONTRACT_ID IS NULL THEN
    IF :NEW.CHARGES_DATE IS NOT NULL THEN
      SELECT COUNT(*) INTO vCOUNT 
        FROM CONTRACTS C, CONTRACT_CANCELS CC
        WHERE C.PHONE_NUMBER_FEDERAL=:NEW.PHONE_NUMBER
          AND C.CONTRACT_DATE <= :NEW.CHARGES_DATE
          AND C.CONTRACT_ID = CC.CONTRACT_ID(+)
          AND (CC.CONTRACT_CANCEL_DATE IS NULL 
                OR CC.CONTRACT_CANCEL_DATE >= :NEW.CHARGES_DATE);
      IF vCOUNT > 0 THEN
        SELECT C.CONTRACT_ID INTO vCONTR 
          FROM CONTRACTS C, CONTRACT_CANCELS CC
          WHERE C.PHONE_NUMBER_FEDERAL=:NEW.PHONE_NUMBER
            AND C.CONTRACT_DATE <= :NEW.CHARGES_DATE
            AND C.CONTRACT_ID = CC.CONTRACT_ID(+)
            AND (CC.CONTRACT_CANCEL_DATE IS NULL 
                  OR CC.CONTRACT_CANCEL_DATE >= :NEW.CHARGES_DATE);
        :NEW.CONTRACT_ID:=vCONTR;
      ELSE
        :NEW.CONTRACT_ID:= -1;
      END IF;                
    ELSE
      :NEW.CONTRACT_ID:= -1;
    END IF;  
  END IF;
END;
/

CREATE OR REPLACE TRIGGER TIU_BALANCE_DATA_AFTER
  BEFORE INSERT OR UPDATE ON BALANCE_DATA FOR EACH ROW
-- Version = 1  
DECLARE
BEGIN
  IF UPDATING THEN
    INSERT INTO BALANCE_DATA_LOG(BALANCE_ROW_ID, PHONE_NUMBER, YEAR_MONTH, 
                                 CHARGES_TYPE_ID, CHARGES_DATE, CHARGES_SUMM, 
                                 CHARGES_COMMENT, CONTRACT_ID, ACTION_TYPE,
                                 IS_ACTIVE, TARIFF_ID)
      VALUES(:OLD.BALANCE_ROW_ID, :OLD.PHONE_NUMBER, :OLD.YEAR_MONTH, 
             :OLD.CHARGES_TYPE_ID, :OLD.CHARGES_DATE, :OLD.CHARGES_SUMM, 
             :OLD.CHARGES_COMMENT, :OLD.CONTRACT_ID, 'DELETE',
             :OLD.IS_ACTIVE, :OLD.TARIFF_ID); 
  END IF;   
  INSERT INTO BALANCE_DATA_LOG(BALANCE_ROW_ID, PHONE_NUMBER, YEAR_MONTH, 
                               CHARGES_TYPE_ID, CHARGES_DATE, CHARGES_SUMM, 
                               CHARGES_COMMENT, CONTRACT_ID, ACTION_TYPE,
                               IS_ACTIVE, TARIFF_ID)
    VALUES(:NEW.BALANCE_ROW_ID, :NEW.PHONE_NUMBER, :NEW.YEAR_MONTH, 
           :NEW.CHARGES_TYPE_ID, :NEW.CHARGES_DATE, :NEW.CHARGES_SUMM, 
           :NEW.CHARGES_COMMENT, :NEW.CONTRACT_ID, 'INSERT',
           :NEW.IS_ACTIVE, :NEW.TARIFF_ID);         
END;
/

CREATE OR REPLACE TRIGGER TD_BALANCE_DATA_BEFORE
  BEFORE DELETE ON BALANCE_DATA FOR EACH ROW
-- Version = 1  
BEGIN
  INSERT INTO BALANCE_DATA_LOG(BALANCE_ROW_ID, PHONE_NUMBER, YEAR_MONTH, 
                               CHARGES_TYPE_ID, CHARGES_DATE, CHARGES_SUMM, 
                               CHARGES_COMMENT, CONTRACT_ID, ACTION_TYPE,
                               IS_ACTIVE, TARIFF_ID)
    VALUES(:OLD.BALANCE_ROW_ID, :OLD.PHONE_NUMBER, :OLD.YEAR_MONTH, 
           :OLD.CHARGES_TYPE_ID, :OLD.CHARGES_DATE, :OLD.CHARGES_SUMM, 
           :OLD.CHARGES_COMMENT, :OLD.CONTRACT_ID, 'DELETE',
           :OLD.IS_ACTIVE, :OLD.TARIFF_ID);                               
END;
/

CREATE INDEX I_BALANCE_DATA_PN ON BALANCE_DATA(PHONE_NUMBER);

CREATE INDEX I_BALANCE_DATA_PN_YM_CTI ON BALANCE_DATA
  (PHONE_NUMBER, YEAR_MONTH, CHARGES_TYPE_ID);

CREATE INDEX I_BALANCE_DATA_PN_YM_CTI_CS ON BALANCE_DATA
  (PHONE_NUMBER, YEAR_MONTH, CHARGES_TYPE_ID, CHARGES_SUMM);
  
CREATE UNIQUE INDEX I_BALANCE_DATA_BALANCE_ROW_ID ON BALANCE_DATA(BALANCE_ROW_ID);
 
ALTER TABLE BALANCE_DATA ADD CONSTRAINT PK_BALANCE_DATA_BALANCE_ROW_ID PRIMARY KEY (BALANCE_ROW_ID);

GRANT SELECT, INSERT, UPDATE, DELETE ON BALANCE_DATA TO CORP_MOBILE_ROLE;

GRANT SELECT ON BALANCE_DATA TO CORP_MOBILE_ROLE_RO;