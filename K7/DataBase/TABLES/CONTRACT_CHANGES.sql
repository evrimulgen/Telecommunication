CREATE TABLE CONTRACT_CHANGES
(
  CONTRACT_CHANGE_ID    INTEGER                 NOT NULL,
  CONTRACT_ID           INTEGER                 NOT NULL,
  FILIAL_ID             INTEGER                 NOT NULL,
  CONTRACT_CHANGE_DATE  DATE                    NOT NULL,
  PHONE_NUMBER_FEDERAL  VARCHAR2(10 CHAR),
  PHONE_NUMBER_CITY     VARCHAR2(7 CHAR),
  PHONE_NUMBER_TYPE     NUMBER(1),
  SIM_NUMBER            VARCHAR2(20 CHAR),
  SUM_GET               NUMBER,
  USER_CREATED          VARCHAR2(30 CHAR),
  DATE_CREATED          DATE,
  USER_LAST_UPDATED     VARCHAR2(30 CHAR),
  DATE_LAST_UPDATED     DATE,
  OPERATOR_ID           INTEGER,
  TARIFF_ID             INTEGER,
  DOCUM_TYPE_ID         INTEGER                 NOT NULL,
  CONFIRMED             NUMBER(1)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          80K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE CONTRACT_CHANGES IS 'Расторжения тоговоров';

COMMENT ON COLUMN CONTRACT_CHANGES.CONTRACT_CHANGE_ID IS 'Первичный ключ';

COMMENT ON COLUMN CONTRACT_CHANGES.CONTRACT_ID IS 'Код контракта';

COMMENT ON COLUMN CONTRACT_CHANGES.FILIAL_ID IS 'Код филиала';

COMMENT ON COLUMN CONTRACT_CHANGES.CONTRACT_CHANGE_DATE IS 'Дата изменения контракта';

COMMENT ON COLUMN CONTRACT_CHANGES.PHONE_NUMBER_FEDERAL IS '№ телефона в федеральном формате (строго 10 цифр)';

COMMENT ON COLUMN CONTRACT_CHANGES.PHONE_NUMBER_CITY IS '№ телефона в городском формате (7 цифр)';

COMMENT ON COLUMN CONTRACT_CHANGES.PHONE_NUMBER_TYPE IS 'Вид номера (1- городской, иначе федеральный)';

COMMENT ON COLUMN CONTRACT_CHANGES.SIM_NUMBER IS 'Номер SIM карты';

COMMENT ON COLUMN CONTRACT_CHANGES.SUM_GET IS 'Сумма полученная от клиента';

COMMENT ON COLUMN CONTRACT_CHANGES.USER_CREATED IS 'Пользователь, создавший запись';

COMMENT ON COLUMN CONTRACT_CHANGES.DATE_CREATED IS 'Дата/время создания записи';

COMMENT ON COLUMN CONTRACT_CHANGES.USER_LAST_UPDATED IS 'Пользователь, редактировавший запись последним';

COMMENT ON COLUMN CONTRACT_CHANGES.DATE_LAST_UPDATED IS 'Дата/время последней редакции записи';

COMMENT ON COLUMN CONTRACT_CHANGES.OPERATOR_ID IS 'Код оператора';

COMMENT ON COLUMN CONTRACT_CHANGES.TARIFF_ID IS 'Код тарифного плана';

COMMENT ON COLUMN CONTRACT_CHANGES.DOCUM_TYPE_ID IS 'Код типа документа (какой вид изменения договора)';

COMMENT ON COLUMN CONTRACT_CHANGES.CONFIRMED IS '1 - документ проведен';


CREATE UNIQUE INDEX PK_CONTRACT_CHANGES ON CONTRACT_CHANGES
(CONTRACT_CHANGE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX I_CONTRACT_CHANGES_FILIAL_ID ON CONTRACT_CHANGES
(FILIAL_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX I_CONTRACT_CHANGES_OPERATOR_ID ON CONTRACT_CHANGES
(OPERATOR_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          80K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX I_CONTRACT_CHANGES_TARIFF_ID ON CONTRACT_CHANGES
(TARIFF_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX I_CONTRACT_CHANGES_CONTRACT_ID ON CONTRACT_CHANGES
(CONTRACT_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX I_CONTRACT_CHANGES_DOC_TYPE_ID ON CONTRACT_CHANGES
(DOCUM_TYPE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

CREATE SEQUENCE S_NEW_CONTRACT_CHANGE_ID
  START WITH 121
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;

GRANT SELECT ON S_NEW_CONTRACT_CHANGE_ID TO LONTANA_ROLE;

CREATE OR REPLACE FUNCTION NEW_CONTRACT_CHANGE_ID RETURN NUMBER IS
--#Version=1
  vRES NUMBER;
BEGIN
  SELECT S_NEW_CONTRACT_CHANGE_ID.NEXTVAL
  INTO vRES
  FROM DUAL;
  RETURN vRES;
END;
/

CREATE OR REPLACE TRIGGER TIU_CONTRACT_CHANGES
  BEFORE INSERT OR UPDATE ON CONTRACT_CHANGES FOR EACH ROW
--#Version=4
DECLARE
CURSOR C IS
  SELECT DB_LOADER_ACCOUNT_PHONE_HISTS.*
    FROM DB_LOADER_ACCOUNT_PHONE_HISTS,
         CONTRACTS
    WHERE DB_LOADER_ACCOUNT_PHONE_HISTS.PHONE_NUMBER=CONTRACTS.PHONE_NUMBER_FEDERAL
      AND CONTRACTS.CONTRACT_ID=:NEW.CONTRACT_ID
    ORDER BY DB_LOADER_ACCOUNT_PHONE_HISTS.END_DATE DESC;
rec C%ROWTYPE;   
CURSOR C1(pDATE IN DATE, pCONTRACT_ID IN INTEGER ) IS
  SELECT DB_LOADER_ACCOUNT_PHONE_HISTS.*
    FROM DB_LOADER_ACCOUNT_PHONE_HISTS,
         CONTRACTS
    WHERE CONTRACTS.CONTRACT_ID=pCONTRACT_ID
      AND DB_LOADER_ACCOUNT_PHONE_HISTS.PHONE_NUMBER=CONTRACTS.PHONE_NUMBER_FEDERAL
      AND DB_LOADER_ACCOUNT_PHONE_HISTS.END_DATE > pDATE + 10/60/60/24  --   +10sec
      AND DB_LOADER_ACCOUNT_PHONE_HISTS.BEGIN_DATE < pDATE - 10/60/60/24  --   -10sec
    ORDER BY DB_LOADER_ACCOUNT_PHONE_HISTS.END_DATE DESC; 
rec1 C1%ROWTYPE;    
DATE_NOW DATE;
vDATE_CONTRACT_CHANGE DATE;
vPHONE_NUMBER VARCHAR2(10 CHAR);
vSTART INTEGER;
vEND INTEGER;
I INTEGER;
J INTEGER;
BEGIN
  SELECT C.PHONE_NUMBER_FEDERAL INTO vPHONE_NUMBER
    FROM CONTRACTS C
    WHERE C.CONTRACT_ID = :NEW.CONTRACT_ID; 
  IF INSERTING THEN
    -- Создание записи о оплате, если сумма ненулевая
    IF :NEW.SUM_GET IS NOT NULL THEN
      INSERT INTO RECEIVED_PAYMENTS(PHONE_NUMBER, PAYMENT_SUM, PAYMENT_DATE_TIME, 
                                    CONTRACT_ID, IS_CONTRACT_PAYMENT, FILIAL_ID,
                                    PAYMENT_ANNUL_FLAG, REMARK, RECEIVED_PAYMENT_TYPE_ID)
        VALUES(vPHONE_NUMBER, -:NEW.SUM_GET, :NEW.CONTRACT_CHANGE_DATE,
               :NEW.CONTRACT_ID, 0, :NEW.FILIAL_ID,
               0, 'Оплата за смену ТП', 21);
    END IF;
    -- Прерывание в истории для создания разрыва отрезка времени (особенно актуально для одноосновных тарифов)
    -- Прерывание по дате добавления
    OPEN C;
    FETCH C INTO rec;
    IF C%FOUND THEN
      DATE_NOW:=SYSDATE;
      UPDATE DB_LOADER_ACCOUNT_PHONE_HISTS
        SET DB_LOADER_ACCOUNT_PHONE_HISTS.END_DATE=DATE_NOW - 1/24/60/60 -- Уменьшим на 1 секунду
        WHERE DB_LOADER_ACCOUNT_PHONE_HISTS.HISTORY_ID=rec.HISTORY_ID;
      INSERT INTO DB_LOADER_ACCOUNT_PHONE_HISTS(PHONE_NUMBER, BEGIN_DATE, END_DATE,PHONE_IS_ACTIVE, CELL_PLAN_CODE)
        VALUES(rec.PHONE_NUMBER, DATE_NOW, rec.END_DATE, rec.PHONE_IS_ACTIVE, rec.CELL_PLAN_CODE);
      INSERT INTO PHONES_TARIF_FOR_RECALC (PHONE_NUMBER) VALUES (rec.PHONE_NUMBER);
      --commit;  
    END IF;
    CLOSE C;
    -- Прерывание в истории для создания разрыва отрезка времени (особенно актуально для одноосновных тарифов)
    -- Прерывание по дате добавления
    vDATE_CONTRACT_CHANGE:=:NEW.CONTRACT_CHANGE_DATE;
    OPEN C1(vDATE_CONTRACT_CHANGE, :NEW.CONTRACT_ID);
    FETCH C1 INTO rec1;
    IF C1%FOUND THEN
      begin
        UPDATE DB_LOADER_ACCOUNT_PHONE_HISTS
          SET DB_LOADER_ACCOUNT_PHONE_HISTS.END_DATE=vDATE_CONTRACT_CHANGE - 1/24/60/60
          WHERE DB_LOADER_ACCOUNT_PHONE_HISTS.HISTORY_ID=rec1.HISTORY_ID;
        INSERT INTO DB_LOADER_ACCOUNT_PHONE_HISTS(PHONE_NUMBER, BEGIN_DATE, END_DATE, PHONE_IS_ACTIVE, CELL_PLAN_CODE)
          VALUES(rec1.PHONE_NUMBER, vDATE_CONTRACT_CHANGE, rec1.END_DATE, rec1.PHONE_IS_ACTIVE, rec1.CELL_PLAN_CODE);
        INSERT INTO PHONES_TARIF_FOR_RECALC(PHONE_NUMBER) 
          VALUES(rec1.PHONE_NUMBER);
        --commit;   
      exception
        when others then
          null;
      end;
    END IF;
    CLOSE C1;    
    -- Новые параметры по умолчанию
    IF NVL(:NEW.CONTRACT_CHANGE_ID, 0) = 0 then
      :NEW.CONTRACT_CHANGE_ID := NEW_CONTRACT_CHANGE_ID;
    END IF;
    :NEW.USER_CREATED := USER;
    :NEW.DATE_CREATED := SYSDATE;
  END IF;
  IF UPDATING THEN    
    -- Изменение записи о оплате, если сумма ненулевая
    IF (:NEW.SUM_GET<>:OLD.SUM_GET) OR (:NEW.CONTRACT_CHANGE_DATE<>:OLD.CONTRACT_CHANGE_DATE) THEN
      UPDATE RECEIVED_PAYMENTS
        SET PAYMENT_SUM=-:NEW.SUM_GET, PAYMENT_DATE_TIME=:NEW.CONTRACT_CHANGE_DATE
        WHERE PHONE_NUMBER = vPHONE_NUMBER
          AND PAYMENT_SUM=-:OLD.SUM_GET
          AND PAYMENT_DATE_TIME=:OLD.CONTRACT_CHANGE_DATE
          AND CONTRACT_ID =:OLD.CONTRACT_ID;
    END IF;
    --
    IF :NEW.CONTRACT_CHANGE_DATE <> :OLD.CONTRACT_CHANGE_DATE THEN
      -- Сменили дату изменения тарифа
      vDATE_CONTRACT_CHANGE:=:NEW.CONTRACT_CHANGE_DATE;
      OPEN C1(vDATE_CONTRACT_CHANGE, :NEW.CONTRACT_ID);
      FETCH C1 INTO rec1;
      IF C1%FOUND THEN
        begin
          UPDATE DB_LOADER_ACCOUNT_PHONE_HISTS
            SET DB_LOADER_ACCOUNT_PHONE_HISTS.END_DATE=vDATE_CONTRACT_CHANGE - 1/24/60/60
            WHERE DB_LOADER_ACCOUNT_PHONE_HISTS.HISTORY_ID=rec1.HISTORY_ID;
          INSERT INTO DB_LOADER_ACCOUNT_PHONE_HISTS(PHONE_NUMBER, BEGIN_DATE, END_DATE, PHONE_IS_ACTIVE, CELL_PLAN_CODE)
            VALUES(rec1.PHONE_NUMBER, vDATE_CONTRACT_CHANGE, rec1.END_DATE, rec1.PHONE_IS_ACTIVE, rec1.CELL_PLAN_CODE);
          INSERT INTO PHONES_TARIF_FOR_RECALC (PHONE_NUMBER) VALUES (rec1.PHONE_NUMBER);
          --commit;   
        exception
          when others then
            null;
        end;
      END IF;
      CLOSE C1; 
    END IF;
    IF :NEW.TARIFF_ID<>:OLD.TARIFF_ID THEN
      OPEN C;
      FETCH C INTO rec;
      IF C%FOUND THEN
        INSERT INTO PHONES_TARIF_FOR_RECALC (PHONE_NUMBER) VALUES (rec.PHONE_NUMBER);
        --commit;  
      END IF;
      CLOSE C;
    END IF;
  END IF;    
  vSTART:=TO_NUMBER(TO_CHAR(:NEW.CONTRACT_CHANGE_DATE, 'YYYYMM'));
  vEND:=TO_NUMBER(TO_CHAR(SYSDATE, 'YYYYMM'));
  FOR I IN TRUNC(vSTART/100)..TRUNC(vEND/100) 
  LOOP
    FOR J IN 1..12 
    LOOP
      IF (I*100 + J >= vSTART) AND (I*100 + J <= vEND) THEN
        INSERT INTO QUEUE_ABONENT_PER_REBILD(YEAR_MONTH, PHONE_NUMBER)
          VALUES(I*100 + J, vPHONE_NUMBER);
      END IF;
    END LOOP;
  END LOOP;
  :NEW.USER_LAST_UPDATED := USER;
  :NEW.DATE_LAST_UPDATED := SYSDATE;
END;
/


ALTER TABLE CONTRACT_CHANGES ADD (
  CONSTRAINT PK_CONTRACT_CHANGES
 PRIMARY KEY
 (CONTRACT_CHANGE_ID)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CONTRACT_CHANGES ADD (
  CONSTRAINT FK_CONTRACT_CHANGES_TARIFF_ID 
 FOREIGN KEY (TARIFF_ID) 
 REFERENCES TARIFFS (TARIFF_ID),
  CONSTRAINT FK_CONTRACT_CHANGES_FILIAL_ID 
 FOREIGN KEY (FILIAL_ID) 
 REFERENCES FILIALS (FILIAL_ID),
  CONSTRAINT FK_CONTRACT_CHNGS_OPERATOR_ID 
 FOREIGN KEY (OPERATOR_ID) 
 REFERENCES OPERATORS (OPERATOR_ID),
  CONSTRAINT FK_CONTRACT_CHNGS_CONTRACT_ID 
 FOREIGN KEY (CONTRACT_ID) 
 REFERENCES CONTRACTS (CONTRACT_ID),
  CONSTRAINT FK_CONTRACT_CHNGS_DOC_TYPE_ID 
 FOREIGN KEY (DOCUM_TYPE_ID) 
 REFERENCES DOCUM_TYPES (DOCUM_TYPE_ID));

GRANT DELETE, INSERT, SELECT, UPDATE ON CONTRACT_CHANGES TO LONTANA_ROLE;

create index I_CONTRACT_CHANGES_QUERY_OPT on CONTRACT_CHANGES (CONTRACT_CHANGE_DATE, CONTRACT_ID, TARIFF_ID);
  tablespace USERS
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

CREATE INDEX I_CONTRACT_CHANGES_QUERY_OPT2 ON CONTRACT_CHANGES(CONTRACT_ID, CONTRACT_CHANGE_DATE DESC, TARIFF_ID);
