--DROP table DB_LOADER_ACCOUNT_PHONES;
-- V2. Кочнев #3412 Отчет по МНП номерам - добавлено обновление таблицы MNP_REMOVE  если номер стал активным

CREATE TABLE DB_LOADER_ACCOUNT_PHONES (
  ACCOUNT_ID INTEGER,
  YEAR_MONTH INTEGER,
  PHONE_NUMBER VARCHAR2(10 CHAR),
  PHONE_IS_ACTIVE NUMBER(1, 0), /* 0 - НЕАКТИВНЫЙ, 1 - АКТИВНЫЙ */
  CELL_PLAN_CODE VARCHAR2(50 CHAR), /* КОД ТАРИФНОГО ПЛАНА*/
  NEW_CELL_PLAN_CODE VARCHAR2(50 CHAR), /* КОД НОВОГО ТАРИФНОГО ПЛАНА*/
  NEW_CELL_PLAN_DATE DATE    /* ДАТА СМЕНЫ ТАРИФНОГО ПЛАНА*/
);

ALTER TABLE DB_LOADER_ACCOUNT_PHONES ADD ORGANIZATION_ID VARCHAR2(100 CHAR);

ALTER TABLE DB_LOADER_ACCOUNT_PHONES ADD CONSTRAINT FK_DB_LOADER_ACC_PHONES_ACCOUN
FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS;

CREATE INDEX I_DB_LOADER_ACCOUNT_PHONES_PHN
ON DB_LOADER_ACCOUNT_PHONES
(PHONE_NUMBER) COMPRESS
/

CREATE INDEX I_DB_LOADER_ACCOUNT_PHONES_YM
ON DB_LOADER_ACCOUNT_PHONES (YEAR_MONTH)
COMPRESS 1
/

CREATE INDEX I_DB_LOADER_ACCOUNT_PHONES_LCK
ON DB_LOADER_ACCOUNT_PHONES (LAST_CHECK_DATE_TIME);
/

CREATE INDEX I_DB_LOADER_ACC_PHONE_PHONE_YM
ON DB_LOADER_ACCOUNT_PHONES (PHONE_NUMBER, YEAR_MONTH) 
COMPRESS 1
/

ALTER TABLE DB_LOADER_ACCOUNT_PHONES ADD CONSERVATION NUMBER(1, 0);

COMMENT ON COLUMN DB_LOADER_ACCOUNT_PHONES.CONSERVATION IS 'Номер на сохранении 1-да, 0-нет, по деф=0'; 

ALTER TABLE DB_LOADER_ACCOUNT_PHONES ADD SYSTEM_BLOCK NUMBER(1, 0);

COMMENT ON COLUMN DB_LOADER_ACCOUNT_PHONES.SYSTEM_BLOCK IS 'Системный блок за мошенничество 1-да, 0-нет, по деф=0'; 
  
CREATE OR REPLACE TRIGGER BUI_db_loader_acc_phones
  before insert or update on db_loader_account_phones  
  for each row
  -- Version = 2
declare
  CURSOR C(YM IN INTEGER, PH IN VARCHAR2) IS
    SELECT *
      FROM DB_LOADER_PHONE_PERIODS DB
      WHERE DB.YEAR_MONTH = YM
        AND DB.PHONE_NUMBER = PH;
  vDUMMY C%ROWTYPE;
  CURSOR H(PH IN VARCHAR2, CH IN DATE) IS
    SELECT *
      FROM DB_LOADER_ACCOUNT_PHONE_HISTS D
      WHERE D.PHONE_NUMBER = PH
        AND D.BEGIN_DATE <= CH
        AND D.END_DATE >= CH;
  vDUMMY_H H%ROWTYPE;     
begin
  :new.last_check_date_time:=sysdate;
  OPEN C(:NEW.YEAR_MONTH, :NEW.PHONE_NUMBER);
  FETCH C INTO vDUMMY;
  IF C%FOUND THEN
    UPDATE DB_LOADER_PHONE_PERIODS DB
      SET DB.ACCOUNT_ID = :NEW.ACCOUNT_ID,
          DB.TARIFF_CODE = :NEW.CELL_PLAN_CODE
      WHERE DB.YEAR_MONTH = :NEW.YEAR_MONTH 
        AND DB.PHONE_NUMBER = :NEW.PHONE_NUMBER;
  ELSE
    INSERT INTO DB_LOADER_PHONE_PERIODS(YEAR_MONTH, PHONE_NUMBER, ACCOUNT_ID, TARIFF_CODE)
      VALUES(:NEW.YEAR_MONTH, :NEW.PHONE_NUMBER, :NEW.ACCOUNT_ID, :NEW.CELL_PLAN_CODE);
  END IF;
  CLOSE C;  
  OPEN H(:NEW.PHONE_NUMBER, :new.last_check_date_time);
  FETCH H INTO vDUMMY_H;
  IF H%FOUND THEN
    IF NVL(:new.PHONE_IS_ACTIVE, 0) <> NVL(vDUMMY_H.PHONE_IS_ACTIVE, 0) 
        OR NVL(:new.CELL_PLAN_CODE, '0') <> NVL(vDUMMY_H.CELL_PLAN_CODE, '0') 
        OR NVL(:new.CONSERVATION, 0) <> NVL(vDUMMY_H.CONSERVATION, 0) 
        OR NVL(:new.SYSTEM_BLOCK, 0) <> NVL(vDUMMY_H.SYSTEM_BLOCK, 0)
        OR NVL(:new.STATUS_ID, 0) <> NVL(vDUMMY_H.STATUS_ID, 0) THEN
      UPDATE DB_LOADER_ACCOUNT_PHONE_HISTS D
        SET D.END_DATE = :new.last_check_date_time - 1/24/60/60  --  -1sec
        WHERE D.PHONE_NUMBER = :NEW.PHONE_NUMBER
          AND D.BEGIN_DATE <= :new.last_check_date_time
          AND D.END_DATE >= :new.last_check_date_time;
      INSERT INTO DB_LOADER_ACCOUNT_PHONE_HISTS(PHONE_NUMBER, BEGIN_DATE, END_DATE, PHONE_IS_ACTIVE, 
                                                CELL_PLAN_CODE, CONSERVATION, SYSTEM_BLOCK, STATUS_ID)
        VALUES(:NEW.PHONE_NUMBER, :new.last_check_date_time, TO_DATE('01.01.3000','DD.MM.YYYY'), :new.PHONE_IS_ACTIVE, 
               :new.CELL_PLAN_CODE, :new.CONSERVATION, :new.SYSTEM_BLOCK, :new.STATUS_ID);
    END IF;
  ELSE
    INSERT INTO DB_LOADER_ACCOUNT_PHONE_HISTS(PHONE_NUMBER, BEGIN_DATE, END_DATE, PHONE_IS_ACTIVE, 
                                              CELL_PLAN_CODE, CONSERVATION, SYSTEM_BLOCK, STATUS_ID)
      VALUES(:NEW.PHONE_NUMBER, :new.last_check_date_time, TO_DATE('01.01.3000','DD.MM.YYYY'), :new.PHONE_IS_ACTIVE, 
             :new.CELL_PLAN_CODE, :new.CONSERVATION, :new.SYSTEM_BLOCK, :new.STATUS_ID);
  END IF;
  CLOSE H;

 update MNP_REMOVE SET 
           is_active     = 1,
           date_activate = SYSDATE
    WHERE phone_number = :NEW.PHONE_NUMBER
      AND is_active = 0;

end BUI_db_loader_acc_phones;
/

GRANT SELECT ON DB_LOADER_ACCOUNT_PHONES TO CRM_USER;
CREATE SYNONYM CRM_USER.DB_LOADER_ACCOUNT_PHONES FOR DB_LOADER_ACCOUNT_PHONES;

ALTER TABLE DB_LOADER_ACCOUNT_PHONES ADD LAST_CHANGE_STATUS_DATE DATE;
COMMENT ON COLUMN DB_LOADER_ACCOUNT_PHONES.LAST_CHANGE_STATUS_DATE IS 'Дата последней смены статуса';

ALTER TABLE DB_LOADER_ACCOUNT_PHONES ADD STATUS_ID INTEGER;
COMMENT ON COLUMN DB_LOADER_ACCOUNT_PHONES.STATUS_ID IS 'Код статуса номера в Билайне';

ALTER TABLE DB_LOADER_ACCOUNT_PHONES ADD (SUBSCRIBERHLR VARCHAR2(10));
COMMENT ON COLUMN DB_LOADER_ACCOUNT_PHONES.SUBSCRIBERHLR IS 'HLR абонента';

ALTER TABLE DB_LOADER_ACCOUNT_PHONES ADD (
  CONSTRAINT FK_PHONE_STATUS_ID 
 FOREIGN KEY (STATUS_ID) 
 REFERENCES BEELINE_STATUS_CODE(STATUS_ID));
 

CREATE INDEX I_DB_LOADER_ACC_PHNE_STATUS_ID
ON DB_LOADER_ACCOUNT_PHONES(STATUS_ID) 
COMPRESS 1
/ 