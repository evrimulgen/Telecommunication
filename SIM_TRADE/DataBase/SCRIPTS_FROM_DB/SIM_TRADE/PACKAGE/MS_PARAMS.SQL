
  CREATE OR REPLACE PACKAGE "SIM_TRADE"."MS_PARAMS" AS
--
--#Version=1
--
-- Получить значение константы
--
 FUNCTION GET_PARAM_VALUE(PARAM_NAME VARCHAR2) RETURN VARCHAR2;
--
-- Установить значение константы (возвращает 0 если такой константы нет)
--
  FUNCTION SET_PARAM_VALUE(PARAM_NAME VARCHAR2, PARAM_VALUE VARCHAR2) RETURN INTEGER;
--
-- Добавить константу
--
    PROCEDURE NEW_PARAM(PARAM_NAME VARCHAR2, PARAM_VALUE VARCHAR2,
    PARAM_DESCR VARCHAR2, PARAM_TYPE VARCHAR2);
--
  PRAGMA RESTRICT_REFERENCES (GET_PARAM_VALUE, WNDS, WNPS );
--
END; 
CREATE OR REPLACE PACKAGE BODY "SIM_TRADE"."MS_PARAMS" AS
--
  FUNCTION GET_PARAM_VALUE(PARAM_NAME VARCHAR2) RETURN VARCHAR2 IS
    S VARCHAR2(256);
  BEGIN
    SELECT VALUE INTO S FROM PARAMS WHERE NAME = PARAM_NAME;
        RETURN (S);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
          RETURN (NULL);
  END;
--
-- Установить значение константы
--
  FUNCTION SET_PARAM_VALUE(PARAM_NAME VARCHAR2, PARAM_VALUE VARCHAR2) RETURN INTEGER IS
  BEGIN
    UPDATE PARAMS SET VALUE = PARAM_VALUE WHERE NAME = PARAM_NAME;
        RETURN (TO_CHAR(SQL%ROWCOUNT));
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
          RETURN (NULL);
  END;
--
-- Добавить константу
--
  PROCEDURE NEW_PARAM(PARAM_NAME VARCHAR2, PARAM_VALUE VARCHAR2,
    PARAM_DESCR VARCHAR2, PARAM_TYPE VARCHAR2) IS
  BEGIN
    INSERT INTO PARAMS
        (PARAM_ID, NAME, DESCR, TYPE, VALUE)

        VALUES
        (s_new_param_id.nextval, PARAM_NAME, PARAM_DESCR, PARAM_TYPE, PARAM_VALUE);
  END;
END; 