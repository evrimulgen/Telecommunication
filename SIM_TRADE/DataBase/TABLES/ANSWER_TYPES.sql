CREATE TABLE ANSWER_TYPES (
  ANSWER_TYPE_ID INTEGER,
  ANSWER_TYPE_NAME VARCHAR2 (50 CHAR),
  USER_CREATED  VARCHAR2(30 CHAR),
  DATE_CREATED  DATE,
  USER_LAST_UPDATED  VARCHAR2(30 CHAR),
  DATE_LAST_UPDATED  DATE
);


COMMENT ON TABLE ANSWER_TYPES IS 'Справочник статусов заявки на блокировку/разблокировку через API';
COMMENT ON COLUMN ANSWER_TYPES.ANSWER_TYPE_ID IS 'Код статуса заявки';
COMMENT ON COLUMN ANSWER_TYPES.ANSWER_TYPE_NAME IS 'Наименование кода статуса заявки';

CREATE UNIQUE INDEX I_PR_ANSWER_TYPE_ID ON ANSWER_TYPES (ANSWER_TYPE_ID);

ALTER TABLE ANSWER_TYPES ADD (
  CONSTRAINT PK_ANSWER_TYPE_ID
  PRIMARY KEY (ANSWER_TYPE_ID)
  USING INDEX I_PR_ANSWER_TYPE_ID
  ENABLE VALIDATE );

INSERT INTO ANSWER_TYPES (ANSWER_TYPE_ID)     
    SELECT BT.ANSWER 
    FROM BEELINE_TICKETS BT
    WHERE BT.ANSWER IS NOT NULL 
    GROUP BY BT.ANSWER;    
COMMIT; 

UPDATE ANSWER_TYPES ANT SET ANT.ANSWER_TYPE_NAME = 'Удачно (разрешенные)' WHERE ANT.ANSWER_TYPE_ID = 1;
UPDATE ANSWER_TYPES ANT SET ANT.ANSWER_TYPE_NAME = 'Не проверенные' WHERE ANT.ANSWER_TYPE_ID = 0; 
UPDATE ANSWER_TYPES ANT SET ANT.ANSWER_TYPE_NAME = 'Ошибка - на проверку в Билайн' WHERE ANT.ANSWER_TYPE_ID = 0;

CREATE SEQUENCE S_NEW_ANSWER_TYPE_ID;

CREATE OR REPLACE FUNCTION NEW_ANSWER_TYPE_ID RETURN NUMBER IS
--#Version=1
  vRES NUMBER;
BEGIN
  SELECT S_NEW_ANSWER_TYPE_ID.NEXTVAL
  INTO vRES
  FROM DUAL;
  RETURN vRES;
END;
/

--#IF GetVersion("TIU_ANSWER_TYPES") < 1 THEN
CREATE OR REPLACE TRIGGER TIU_ANSWER_TYPES 
  BEFORE INSERT OR UPDATE ON ANSWER_TYPES FOR EACH ROW 
--#Version=1
BEGIN 
  IF INSERTING THEN 
    IF NVL(:NEW.ANSWER_TYPE_ID, 0) = 0 then 
      :NEW.ANSWER_TYPE_ID := NEW_ANSWER_TYPE_ID; 
    END IF; 
    :NEW.USER_CREATED := USER; 
    :NEW.DATE_CREATED := SYSDATE;
  END IF; 
  :NEW.USER_LAST_UPDATED := USER; 
  :NEW.DATE_LAST_UPDATED := SYSDATE; 
END;
--#end if

GRANT ALTER, DELETE, INSERT, SELECT, UPDATE ON ANSWER_TYPES TO CORP_MOBILE_ROLE;

GRANT SELECT ON ANSWER_TYPES TO CORP_MOBILE_ROLE_RO;  