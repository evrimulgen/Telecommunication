CREATE TABLE QUEUE_LOAD_BLOCK_UNBLOCK(
  QUEUE_LOAD_BLOCK_ID INTEGER,
  PHONE_NUMBER VARCHAR2(10 CHAR),
  TYPE_ACTION NUMBER(1),
  DATEB DATE,
  DATE_INSERT DATE,
  SUCCESS INTEGER,
  RESULT_STR VARCHAR2(1000 CHAR)
  );

COMMENT ON TABLE QUEUE_LOAD_BLOCK_UNBLOCK IS 'Очередь массовой блокировки/разблокировки';
COMMENT ON COLUMN QUEUE_LOAD_BLOCK_UNBLOCK.queue_load_block_id IS 'Первичный ключ';
COMMENT ON COLUMN QUEUE_LOAD_BLOCK_UNBLOCK.phone_number IS 'Номер телефона';
COMMENT ON COLUMN QUEUE_LOAD_BLOCK_UNBLOCK.type_action IS 'Тип действия (0-блокировка, 1-разблокировка)';
COMMENT ON COLUMN QUEUE_LOAD_BLOCK_UNBLOCK.dateb IS 'Дата блокировки/разблокировки';
COMMENT ON COLUMN QUEUE_LOAD_BLOCK_UNBLOCK.date_insert IS 'Дата ввода';
COMMENT ON COLUMN QUEUE_LOAD_BLOCK_UNBLOCK.success IS 'Успех';
COMMENT ON COLUMN QUEUE_LOAD_BLOCK_UNBLOCK.result_str IS 'Результат';

ALTER TABLE QUEUE_LOAD_BLOCK_UNBLOCK ADD (
  CONSTRAINT PK_QUEUE_LOAD_BLOCK_ID
  PRIMARY KEY
  (QUEUE_LOAD_BLOCK_ID)
  USING INDEX);

CREATE INDEX QUEUE_LOAD_BLOCK_UNBLOCK_PN ON QUEUE_LOAD_BLOCK_UNBLOCK(PHONE_NUMBER);

CREATE SEQUENCE S_NEW_QUEUE_LOAD_BLOCK_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;  
  
CREATE OR REPLACE FUNCTION NEW_QUEUE_LOAD_BLOCK_ID RETURN INTEGER IS
--#Version=1
  vRES NUMBER;
BEGIN
  SELECT S_NEW_QUEUE_LOAD_BLOCK_ID.NEXTVAL
    INTO vRES
    FROM DUAL;
  RETURN vRES;
END;  

CREATE OR REPLACE TRIGGER TI_QUEUE_LOAD_BLOCK_UNBLOCK
  BEFORE INSERT ON QUEUE_LOAD_BLOCK_UNBLOCK FOR EACH ROW
--#Version=1
DECLARE
  --PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  IF NVL(:NEW.QUEUE_LOAD_BLOCK_ID, 0)=0 THEN
    :NEW.QUEUE_LOAD_BLOCK_ID := NEW_QUEUE_LOAD_BLOCK_ID;
  END IF;
  :NEW.DATE_INSERT := SYSDATE;
END;
/ 


GRANT SELECT, INSERT, UPDATE, DELETE ON QUEUE_LOAD_BLOCK_UNBLOCK TO SIM_TRADE_ROLE;
GRANT SELECT ON QUEUE_LOAD_BLOCK_UNBLOCK TO SIM_TRADE_ROLE_RO
GRANT SELECT ON S_NEW_QUEUE_LOAD_BLOCK_ID TO SIM_TRADE_ROLE;